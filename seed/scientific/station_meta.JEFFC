#include "station_meta.h"
using namespace std;

###CPP### ###CUDA### ###HOST### station_meta_data::station_meta_data(){
  this->set_lat(-999.);
  this->set_lon(-999.);
  this->set_altitude(-999.);  
  this->id = NULL;
}

###CPP### ###CUDA### ###HOST### station_meta_data::station_meta_data(const station_meta_data &data){
  this->id=NULL;
  this->create(data.get_lat(),data.get_lon(),data.get_altitude(),data.get_id());
}

###CPP### ###CUDA### ###HOST### station_meta_data::~station_meta_data(){
  if(this->id != NULL){
    delete [] id;
  }
  id = NULL;
  this->set_lat(-999.);
  this->set_lon(-999.);
  this->set_altitude(-999.);  
}

###CPP### ###CUDA### ###HOST### void station_meta_data::create(double lat,double lon,double altitude,char *id){
  this->set_lat(lat);
  this->set_lon(lon);
  this->set_altitude(altitude);
  this->set_id(id);
}

###CPP### ###CUDA### ###HOST### bool station_meta_data::isvalid(){
  if(this->get_lat() < -100 || this->get_lon() < -200 || this->get_altitude() < 0){
    return 0;
  }
  else{
    return 1;
  }
}
###CPP### ###CUDA### ###HOST### bool station_meta_data::operator==(const station_meta_data &in){
  //only compare the id of the station
  if(strcmp(this->id,in.id)==0){
    return 1;
  }
  else{
    return 0;
  }
}

###CPP### ###CUDA### ###HOST### void station_meta_data::set_lat(const double &lat){
  this->lat = lat;
}
###CPP### ###CUDA### ###HOST### void station_meta_data::set_lon(const double &lon){
  this->lon = lon;
}
###CPP### ###CUDA### ###HOST### void station_meta_data::set_altitude(const double &altitude){
  this->altitude = altitude;
}
###CPP### ###CUDA### ###HOST### void station_meta_data::set_id(const char *id){
  if(this->id == NULL){
    this->id = new char [100];
  }
  strcpy(this->id,id);
}

###CPP### ###CUDA### ###HOST### double station_meta_data::get_lat() const{
  return this->lat;
}
###CPP### ###CUDA### ###HOST### double station_meta_data::get_lon() const{
  return this->lon;
}
###CPP### ###CUDA### ###HOST### double station_meta_data::get_altitude() const{
  return this->altitude;
}
###CPP### ###CUDA### ###HOST### char* station_meta_data::get_id() const{
  return this->id;
}

###CPP### ###CUDA### ###HOST### station_meta_data &station_meta_data::operator=(const station_meta_data &in){
  if(this == &in){
    return *this;
  }

  this->set_lat(in.get_lat());
  this->set_lon(in.get_lon());
  this->set_altitude(in.get_altitude());
  this->set_id(in.get_id());

  return *this;
}



station_meta::station_meta(){
  num_aws = 0;
}
station_meta::station_meta(const station_meta &meta){
  num_aws = 0;
  *this = meta;
}
station_meta &station_meta::operator=(const station_meta &in){
  if(this == &in){
    return *this;
  }

  if(in.get_num_aws()>0){
    this->destroy();

    this->num_aws = in.get_num_aws();
    this->aws_info = new station_meta_data[this->get_num_aws()];

    int i;
    for(i=0;i<in.get_num_aws();i++){
      this->aws_info[i] = in.aws_info[i];
    }
  }  

  return *this;
}
station_meta &station_meta::operator+=(const station_meta &in){
  //appending operator
  station_meta temp;
  //make memory space that is more then enough
  temp.create(this->get_num_aws()+in.get_num_aws());
  int i,j;
  for(i=0;i<this->get_num_aws();i++){
    *(temp.get_station_meta_data(i))=*(this->get_station_meta_data(i));
  }

  int total_num_aws=this->get_num_aws();
  for(j=0;j<in.get_num_aws();j++){
    int found=0;
    for(i=0;i<this->get_num_aws();i++){
      if(*(this->get_station_meta_data(i))==*(in.get_station_meta_data(j))){
	found = 1;
	break;
      }
    }
    if(!found){
      total_num_aws++;
      *(temp.get_station_meta_data(total_num_aws))=*(in.get_station_meta_data(j));
    }
  }
  temp.num_aws = total_num_aws;
  //this will trim the extra memory space allocated
  *this=temp;
}
station_meta::~station_meta(){
  this->destroy();
}
void station_meta::destroy(){
  if(this->get_num_aws()>0){
    delete [] aws_info;
  }
  this->num_aws = 0;
}
void station_meta::create(const int& num_aws,station_meta_data* aws){
  this->create(num_aws);
  int i;
  for(i=0;i<this->num_aws;i++){
    this->aws_info[i] = aws[i];
  }
}
void station_meta::create(const int& num_aws){
  this->destroy();

  this->num_aws = num_aws;
  this->aws_info = new station_meta_data [this->num_aws];
}
void station_meta::read_file(char* filename){
  ifstream file(filename);
  int recordnum = 0;
  string line;
  if(file){
    string token;
    stringstream iss;
    int counter=0;
    
    while (getline(file,line)){
      iss << line;
      while (getline(iss,token, ',')){
	counter ++;
	if(!(counter < 5)){
	  counter = 0;
	}
      }
      recordnum ++;
      iss.clear();
    }
  }
  this->num_aws = recordnum-1;
  if(recordnum > 1){
    station_meta_data* temp_aws_info;
    
    temp_aws_info = new station_meta_data[recordnum-1];
    
    recordnum = 0;
    
    ifstream file2(filename);
    if(file2){
      string token;
      stringstream iss;
      int counter=0;
      
      while (getline(file2,line)){
	iss << line;
	while (getline(iss,token, ',')){
	  if(recordnum!=0){
	    if(counter == 1){
	      if((token.c_str())[0] == '\"'){
		temp_aws_info[recordnum-1].set_id(token.substr(1,token.size()-2).c_str());
	      }
	      else{
		temp_aws_info[recordnum-1].set_id(token.c_str());
	      }
	    }
	    if(counter == 2){
	      if(token!="") temp_aws_info[recordnum-1].set_lat(atof(token.c_str()));
	    }
	    if(counter == 3){
	      if(token!="") temp_aws_info[recordnum-1].set_lon(atof(token.c_str()));
	    }
	    if(counter == 4){
	      if(token!="") temp_aws_info[recordnum-1].set_altitude(atof(token.c_str()));
	    }
	  }
	  counter ++;
	  if(!(counter < 5)){
	    counter = 0;
	  }
	}
	recordnum ++;
	iss.clear();
      }
    }
    recordnum--;
    this->num_aws = 0;
    int i;
    for(i=0;i<recordnum;i++){
      //error checking
      if(temp_aws_info[i].get_altitude() > 0.){
	this->num_aws++;
      }
    }
    this->aws_info = new station_meta_data[this->num_aws];

    int j = 0;
    for(i=0;i<recordnum;i++){
      if(temp_aws_info[i].get_altitude() > 0.){
	this->aws_info[j] = temp_aws_info[i];
	j++;
      }
    }

    delete [] temp_aws_info;
  }
  else{
    cout << "Error! AWS meta data file empty of not found." << endl;
    exit(0);
  }
}

int station_meta::get_num_aws() const{
   return this->num_aws;
}

station_meta_data* station_meta::get_station_meta_data(int index) const{
  return &aws_info[index];
}

station_meta_data* station_meta::get_station_meta_data(const char *id) const{
  int i;
  for(i=0;i<this->get_num_aws();i++){
    if(strcmp(this->aws_info[i].get_id(),id)==0){
      return &aws_info[i];
    }
  }

  return NULL;
}

station_meta_data* station_meta::get_station_meta_data(const char *id){
  int i;
  for(i=0;i<this->get_num_aws();i++){
    if(strcmp(this->aws_info[i].get_id(),id)==0){
      return &aws_info[i];
    }
  }

  return NULL;
}

void station_meta::filter_sharp_hills(const station_meta& in, const double &radius, const double &threshold_ratio){
  int i,j;

  double mean_height;
  int counter, num_aws_counter = 0;
  double pt[2][2];

  bool *flat;
  flat = new bool [in.get_num_aws()];

  for(i=0;i<in.get_num_aws();i++){
    mean_height = 0.;
    counter = 0;
    flat[i] = 0;

    pt[0][0] = in.get_station_meta_data(i)->get_lat();
    pt[0][1] = in.get_station_meta_data(i)->get_lon();    

    for(j=0;j<in.get_num_aws();j++){
      pt[1][0] = in.get_station_meta_data(j)->get_lat();
      pt[1][1] = in.get_station_meta_data(j)->get_lon();    

      if(libjeff::earth_latlon2dist(pt[0],pt[1]) <= radius && libjeff::earth_latlon2dist(pt[0],pt[1])>0.){
	mean_height += in.get_station_meta_data(j)->get_altitude();
	counter++;
      }
    }

    if(counter>0){
      mean_height /= counter;
      if(in.get_station_meta_data(i)->get_altitude() <= threshold_ratio*mean_height){
	num_aws_counter++;
	flat[i] = 1;
      }
    }
  }

  this->num_aws = num_aws_counter;
  this->aws_info  = new station_meta_data [this->num_aws];

  num_aws_counter = 0;
  for(i=0;i<in.get_num_aws();i++){
    if(flat[i]){
      this->aws_info[num_aws_counter] = *(in.get_station_meta_data(i));
      num_aws_counter++;
    }
  }

  delete [] flat;
}

ostream &operator<<(ostream &output, const station_meta& tooutput){
  int i;
  cout << tooutput.get_num_aws() << endl;
  for(i=0;i<tooutput.get_num_aws();i++){
    output << tooutput.get_station_meta_data(i)->get_id() << "\t" << tooutput.get_station_meta_data(i)->get_lat() << "\t" << tooutput.get_station_meta_data(i)->get_lon() << "\t" << tooutput.get_station_meta_data(i)->get_altitude() << endl;
  }

  return output;
}
