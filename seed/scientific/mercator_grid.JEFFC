###CUDA####include<cuda.h>
#include<iostream>
#include<netcdf.h>
using namespace std;

#include "cuda_setting.h"
#include "grid_data.h"
#include "mercator_grid.h"
#include "map_projection.h"
#include "math_special_function.h"
#include "physics_constants.h"
#include "regular_grid.h"
using namespace libjeff;

###CPP### ###CUDA### ###HOST### mercator_grid::mercator_grid():regular_grid(){
  ref_latlon = new double [2];
}
###CPP### ###CUDA### ###HOST### mercator_grid::mercator_grid(int nx,int ny,int nz,int ndim):regular_grid(){
  ref_latlon = new double [2];
  this->regular_grid::create(nx,ny,nz,ndim);
}
###CPP### ###CUDA### ###HOST### mercator_grid::mercator_grid(double truelat,double ref_lat,double ref_lon,double lat_res,double lon_res,double latloc,double lonloc,int nx,int ny,int nz,int ndim):regular_grid(){
  ref_latlon = new double [2];
  this->create(truelat,ref_lat,ref_lon,lat_res,lon_res,latloc,lonloc,nx,ny,nz,ndim);
}
###CPP### ###CUDA### ###HOST### mercator_grid::~mercator_grid(){
  grid_data::destroy();
  delete [] ref_latlon;
}

###CPP### ###CUDA### ###HOST### void mercator_grid::create(double truelat,double ref_lat,double ref_lon,double lat_res,double lon_res,double latloc,double lonloc,int nx,int ny,int nz,int ndim){
  this->create(nx,ny,nz,ndim);
  this->set_truelat(truelat);
  this->set_ref_latlon(ref_lat,ref_lon);
  this->set_res(lat_res,lon_res);
  this->set_latlonloc(latloc,lonloc);
  
  this->gen_grid();
}
###CPP### ###CUDA### ###HOST### void mercator_grid::create(int nx,int ny,int nz,int ndim,int *idummy,double* ddummy){
  if(idummy != NULL && ddummy != NULL){
    this->create(ddummy[0],ddummy[1],ddummy[2],ddummy[3],ddummy[4],idummy[0],idummy[1],nx,ny,nz,ndim);
  }
  else{
    this->create(nx,ny,nz,ndim);
  }
}
###CPP### ###CUDA### ###HOST### void mercator_grid::set_truelat(double truelat){
  this->truelat=truelat;
}
###CPP### ###CUDA### ###HOST### void mercator_grid::set_ref_latlon(double *in){
  this->set_ref_latlon(in[0],in[1]);
}
###CPP### ###CUDA### ###HOST### void mercator_grid::set_ref_latlon(double ref_lat,double ref_lon){
  this->ref_latlon[0]=ref_lat;
  this->ref_latlon[1]=ref_lon;
}
###CPP### ###CUDA### ###HOST### void mercator_grid::set_res(double lat_res,double lon_res){
  this->lat_res=lat_res;
  this->lon_res=lon_res;
}
###CPP### ###CUDA### ###HOST### void mercator_grid::set_latlonloc(double latloc,double lonloc){
  this->latloc=latloc;
  this->lonloc=lonloc;
}

###CPP### ###CUDA### ###HOST### void mercator_grid::gen_grid(){
  gen_mercator(y,x,ref_latlon[0],ref_latlon[1],truelat,lat_res,lon_res,ny,nx,latloc,lonloc);
}
###CPP### ###CUDA### ###HOST### grid_data& mercator_grid::operator=(const grid_data& in){
  if(this == &in){
    return *this;
  }
  
  this->create(in.get_nx(),in.get_ny(),in.get_nz(),in.get_ndim());
  this->set_x(in.get_x());
  this->set_y(in.get_y());
  this->set_z(in.get_z());
  this->set_data(in.get_data());
  ###CUDA###if(in.get_d_nx()>0){
    this->create_gpu(in.get_d_nx(),in.get_d_ny(),in.get_d_nz(),in.get_d_ndim());
    
    cudaMemcpy(d_x,in.get_d_x(),in.get_d_nx()*sizeof(double),cudaMemcpyDeviceToDevice);
    cudaMemcpy(d_y,in.get_d_y(),in.get_d_ny()*sizeof(double),cudaMemcpyDeviceToDevice);
    cudaMemcpy(d_z,in.get_d_z(),in.get_d_nz()*sizeof(double),cudaMemcpyDeviceToDevice);
    cudaMemcpy(d_grid1D,in.get_d_data(),in.get_d_nx()*in.get_d_ny()*in.get_d_nz()*in.get_d_ndim()*sizeof(double),cudaMemcpyDeviceToDevice);
  }
  
  return *this;
}

###CPP### ###CUDA### ###HOST### double *mercator_grid::cal_xyindex(double *latlon,double* xyindex_work) const{
  return cal_mercator_xyindex(latlon,ref_latlon[0],ref_latlon[1],truelat,lat_res,lon_res,latloc,lonloc,xyindex_work);
}
###CPP### ###CUDA### ###HOST### double *mercator_grid::cal_xyindex(int npt,double *latlon,double* xyindex_work) const{
  return cal_mercator_xyindex(npt,latlon,ref_latlon[0],ref_latlon[1],truelat,lat_res,lon_res,latloc,lonloc,xyindex_work);
}
/*
###CPP### ###CUDA### ###HOST### int mercator_grid::readWRF3NetCDF(char *filename, char *variableName, char *stagger,date_time *datatime,int ndim,int dim_index){
  int error_flag = 0;
  int i,j,k,m;
  
  int ncid, *dimid;
  long nx, ny, nz, nkind;
  nc_open(filename,NC_NOWRITE,&ncid);
  
  size_t time_index = 0;
  if(datatime != NULL){
    int *time_dimid = new int [2];
    
    nc_inq_dimid(ncid,"Time",time_dimid);
    nc_inq_dimid(ncid,"DateStrLen",time_dimid+1);
    
    size_t ntime, datestrlen;
    nc_inq_dimlen(ncid,time_dimid[0],&ntime);
    nc_inq_dimlen(ncid,time_dimid[1],&datestrlen);
    
    char *datestr = new char [datestrlen+1];
    date_time temp_time;
    
    size_t st[2], end[2];
    st[1] = 0;
    end[0] = 1;
    end[1] = datestrlen;
    int i;
    
    bool found_match = 0;
    for(i=0;i<ntime;i++){
      st[0] = i;
      
      nc_get_vara_text(ncid,ncvarid(ncid,"Times"),st,end,datestr);
      
      if(strcmp(datestr,"0000-00-00_00:00:00")==0){
	found_match = 1;
	break;
      }
      else{
	temp_time.set_time(datestr);
	if(temp_time == *datatime){
	  time_index = i;
	  found_match = 1;
	  break;
	}
      }
    }
    
    if(!found_match){
      cout << "Unable to find a matched Time in the WRF NetCDF file when trying to look for " << *datatime << endl;
      return 1;
    }
    
    delete [] datestr;
    delete [] time_dimid;
  }
  
  int var_ndim;
  nc_inq_varndims(ncid,ncvarid(ncid,variableName),&var_ndim);
  if(var_ndim>=3){
    dimid = new int [var_ndim];
    
    nc_inq_vardimid(ncid,ncvarid(ncid,variableName),dimid);
    ncdiminq(ncid,dimid[var_ndim-1],(char *) 0,&nx);
    ncdiminq(ncid,dimid[var_ndim-2],(char *) 0,&ny);
    if(var_ndim==4){
      if(strcmp(variableName,"LANDUSEF")==0 || strcmp(variableName,"SOILCBOT")==0 || strcmp(variableName,"SOILCTOP")==0){
	nz = 1;
	ncdiminq(ncid,dimid[1],(char *) 0,&nkind);
      }
      else{
	ncdiminq(ncid,dimid[1],(char *) 0,&nz);
	nkind = 1;
      }
    }
    else{
      nz = 1;
      nkind = 1;
    }
    delete [] dimid;
    
    if(nx != this->get_nx() || ny != this->get_ny() || nz != this->get_nz()){
      if(this->get_nx() != 0 && this->get_ny() != 0 && this->get_nz() != 0){
	cout << "Warning! Data dimension in the file not equal to allocated dimension of datatype." << endl << "Reallocation will be performed." << endl;
      }
      
      double cent_lat,cent_lon;
      double truelat1,truelat2,ref_lon,lat_res,lon_res;//,ref_lat;
      //	int lonloc, latloc;
      nc_get_att_double(ncid,NC_GLOBAL,"TRUELAT1",&truelat1);
      nc_get_att_double(ncid,NC_GLOBAL,"TRUELAT2",&truelat2);
      nc_get_att_double(ncid,NC_GLOBAL,"STAND_LON",&ref_lon);
      nc_get_att_double(ncid,NC_GLOBAL,"CEN_LAT",&cent_lat);
      nc_get_att_double(ncid,NC_GLOBAL,"CEN_LON",&cent_lon);
      nc_get_att_double(ncid,NC_GLOBAL,"DX",&lon_res);
      nc_get_att_double(ncid,NC_GLOBAL,"DY",&lat_res);
      
      this->create(truelat1,cent_lat,cent_lon,lat_res,lon_res,nx/2-1,ny/2-0.5,(int) nx,(int) ny,(int) nz,ndim);
      
      this->gen_grid();
    }
    
    float *temp = new float [nx*ny*nz*nkind];
    double *dtemp = new double [nx*ny*nz*nkind];
    size_t *st, *end;
    st = new size_t [var_ndim];
    end = new size_t [var_ndim];
    st[0] = time_index;
    for(i=1;i<var_ndim;i++){
      st[i] = 0;
    }
    end[0] = 1;
    end[var_ndim-2] = ny;
    end[var_ndim-1] = nx;
    if(var_ndim==4){
      end[1] = nz*nkind;
    }
    nc_get_vara_float(ncid,ncvarid(ncid,variableName),st,end,temp);
    //nc_get_var_float(ncid,ncvarid(ncid,variableName),temp);
    
    delete [] st;
    delete [] end;
    
    for(i=0;i<nx;i++){
      for(j=0;j<ny;j++){
	for(k=0;k<nz;k++){
	  for(m=0;m<nkind;m++){
	    dtemp[i*ny*nz*nkind + j*nz*nkind + k*nkind + m]=temp[m*nz*ny*nx + k*ny*nx + j*nx + i];
	  }
	}
      }
    }
    
    if(nkind == 1){
      this->set_data4dim(dim_index,dtemp);
    }
    else{
      for(i=0;i<nx;i++){
	for(j=0;j<ny;j++){
	  for(k=0;k<nz;k++){
	    for(m=0;m<nkind;m++){
	      this->get_data(i,j,k)[m+dim_index] = dtemp[i*ny*nz*nkind + j*nz*nkind + k*nkind + m];
	    }
	  }
	}
      }
    }
    
    delete [] dtemp;
    delete [] temp;
  }
  else{
    cout << "The dimensions of the NetCDF data is too small." << endl;
    error_flag = 1;
  }
  
  ncclose(ncid);
  
  return error_flag;
}
*/
###CPP### ###CUDA### ###HOST### void mercator_grid_allocation(grid_data* &in){
  in = new mercator_grid;
}
