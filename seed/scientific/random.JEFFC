#include<cstdlib>
#include<cmath>
###CUDA####include<curand_kernel.h>
#include<limits>
#include<thread>
#include<time.h>

#include"error_code.h"
#include"physics_constants.h"
#include"random.h"
namespace libjeff{
  random_number::random_number(){
    std::srand(time(NULL));
  }
  random_number::random_number(int seed){
    std::srand(seed);
  }

  random_uniform::random_uniform():random_number(){
    this->set_param(0.,1.);
  }
  random_uniform::random_uniform(int seed):random_number(seed){
    this->set_param(0.,1.);
  }
  random_uniform::random_uniform(double a,double b):random_number(){
    this->set_param(a,b);
  }
  random_uniform::random_uniform(int seed,double min,double max):random_number(seed){
    this->set_param(min,max);
  }
  int random_uniform::set_param(double a,double b){
    min = a;
    max = b;

    return _ERRORCODE_NOERROR;
  }
  double random_uniform::rand() const{
    return std::rand() * (1.0 / RAND_MAX)*(max - min) + min;
  }

  random_gaussian::random_gaussian():random_number(){
    this->set_param(0.,1.);
  }
  random_gaussian::random_gaussian(int seed):random_number(seed){
  }
  int random_gaussian::set_param(double a,double b){
    mu = a;
    sigma = b;

    return _ERRORCODE_NOERROR;
  }
  double random_gaussian::rand() const{
    static const double epsilon = std::numeric_limits<double>::min();
    static const double two_pi = 2.0*pi;
    
    thread_local double z1;
    thread_local bool generate;
    generate = !generate;
    
    if (!generate)
      return z1 * sigma + mu;
    
    double u1, u2;
    do
      {
	u1 = std::rand() * (1.0 / RAND_MAX);
	u2 = std::rand() * (1.0 / RAND_MAX);
      }
    while ( u1 <= epsilon );
    
    double z0;
    z0 = sqrt(-2.0 * log(u1)) * cos(two_pi * u2);
    z1 = sqrt(-2.0 * log(u1)) * sin(two_pi * u2);
    return z0 * this->sigma + this->mu;
  }

  ###CUDA### ###GLOBAL### void curand_init_kernel(int n,unsigned long long seed,curandState_t *state){
    int i=blockDim.x*blockIdx.x + threadIdx.x;
    
    if(i < n){
      curand_init(seed,i,0,state+i);
    }
  }
  ###CUDA### ###GLOBAL### void curand_uniform_double_kernel(int n,curandState_t *state,double *randout){
    int i=blockDim.x*blockIdx.x + threadIdx.x;
    
    if(i < n){
      randout[i] = curand_uniform_double(state+i);
    }
  }
}
