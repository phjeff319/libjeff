#include "grib_tools.h"

#include <iostream>
#include <cstring>

#include "eccodes.h"

#include "date_time.h"
#include "debug_mode.h"
#include "error_code.h"
#include "file_check.h"
#include "file_handler.h"
#include "grid_codes.h"
#include "grid_data_field.h"

#define BUFFSIZE 4096

int grib_tools_get_rec_levels_variables(char* filename,int &num_records,char** &levels,char** &variables){
  num_records = 0;

  FILE* file;
  file = fopen(filename,"r");
  codes_handle *h = NULL;
  int error;
  while((h = codes_handle_new_from_file(0,file,PRODUCT_GRIB,&error)) != NULL){
    num_records++;
    codes_handle_delete(h);
  }

  fclose(file);

  int i,j;
  
  char **rec_levels = new char *[num_records];
  char **rec_variables = new char *[num_records];
  for(i=0;i<num_records;i++){
    rec_levels[i] = new char [BUFFSIZE];
    rec_variables[i] = new char [BUFFSIZE];
  }

  file = fopen(filename,"r");
  j=0;
  while((h = codes_handle_new_from_file(0,file,PRODUCT_GRIB,&error)) != NULL){
    size_t vlen=BUFFSIZE;
    codes_get_string(h,"level",rec_levels[j],&vlen);
    vlen=BUFFSIZE;
    codes_get_string(h,"shortName",rec_variables[j],&vlen);
    j++;
    codes_handle_delete(h);
  }
  fclose(file);

  return _ERRORCODE_NOERROR;
}

int grib_tools_get_rec_with_levels_variables(char* filename,char *levels,char *variables,date_time valid_time,char *lat_res,char *lon_res,char *from_lat,char *to_lat,char *from_lon,char *to_lon,int &nsize,double* &rec,double &missing){
  FILE* file;
  file = fopen(filename,"r");
  if(file == NULL){
    return _ERRORCODE_FILENOTFOUND;
  }
  codes_handle *h = NULL;
  int error;
  char *rec_levels = new char [BUFFSIZE];
  char *rec_variables = new char [BUFFSIZE];
  char *rec_lat_res = new char [BUFFSIZE];
  char *rec_lon_res = new char [BUFFSIZE];
  char *rec_from_lat = new char [BUFFSIZE];
  char *rec_to_lat = new char [BUFFSIZE];
  char *rec_from_lon = new char [BUFFSIZE];
  char *rec_to_lon = new char [BUFFSIZE];
  char *rec_valid_date = new char [BUFFSIZE];
  char *rec_valid_time = new char [BUFFSIZE];
  size_t rec_nsize;
  date_time rec_time;
  bool found = false;
  while((h = codes_handle_new_from_file(0,file,PRODUCT_GRIB,&error)) != NULL){
    size_t vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"level",rec_levels,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"shortName",rec_variables,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"jDirectionIncrementInDegrees",rec_lat_res,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"iDirectionIncrementInDegrees",rec_lon_res,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"latitudeOfFirstGridPointInDegrees",rec_from_lat,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"latitudeOfLastGridPointInDegrees",rec_to_lat,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"longitudeOfFirstGridPointInDegrees",rec_from_lon,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"longitudeOfLastGridPointInDegrees",rec_to_lon,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"validityDate",rec_valid_date,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"validityTime",rec_valid_time,&vlen),0);
    if(strlen(rec_valid_time)<4){
      strcat(rec_valid_date,"0");
    }
    strcat(rec_valid_date,rec_valid_time);
    rec_time.set_time(rec_valid_date);
    codes_get_size(h,"values",&rec_nsize);

    if(strcmp(levels,rec_levels) == 0 && strcmp(variables,rec_variables) == 0 && rec_time == valid_time
       && (lat_res == NULL || strcmp(lat_res,rec_lat_res) == 0) 
       && (lon_res == NULL || strcmp(lon_res,rec_lon_res) == 0) 
       && (from_lat == NULL || strcmp(from_lat,rec_from_lat) == 0)
       && (to_lat == NULL || strcmp(to_lat,rec_to_lat) == 0)
       && (from_lon == NULL || strcmp(from_lon,rec_from_lon) == 0)
       && (to_lon == NULL || strcmp(to_lon,rec_to_lon) == 0)
       && (lat_res == NULL || lon_res == NULL || from_lat == NULL || to_lat == NULL || from_lon == NULL || to_lon == NULL || rec_nsize == nsize)
       ){
      if((lat_res == NULL || lon_res == NULL || from_lat == NULL || to_lat == NULL || from_lon == NULL || to_lon == NULL)){
	//cout << "allocation called" << endl;
	nsize = rec_nsize;
	rec = new double [nsize];
      }
      found = true;
      codes_get_double_array(h,"values",rec,&rec_nsize);
      codes_get_double(h,"missingValue",&missing);
      codes_handle_delete(h);
      break;
    }
    else{
      codes_handle_delete(h);
    }
  }
  fclose(file);

  if(!found){
    return _ERRORCODE_GRIBDATA_NOTFOUND;
  }

  delete [] rec_levels;
  delete [] rec_variables;
  delete [] rec_lat_res;
  delete [] rec_lon_res;
  delete [] rec_from_lat;
  delete [] rec_to_lat;
  delete [] rec_from_lon;
  delete [] rec_to_lon;
  delete [] rec_valid_date;
  delete [] rec_valid_time;
  return _ERRORCODE_NOERROR;
}
int grib_tools_get_rec_with_levels_variables(char* filename,char *levels,char *variables,date_time valid_time,int num_param,char **param_name,char **param_value,int &nsize,double* &rec,double &missing){
  /*
  FILE* file;
  libjeff::file_handler* ffile = NULL;
  int num_handle = 0;
  int error = _ERRORCODE_NOERROR;
  codes_handle *h = NULL;

  bool sftpfile = libjeff::is_sftp_file(filename);
  char *readbuff = NULL;
  char *buff;
  size_t size;

  if(sftpfile){
    openfile(ffile,filename);

    ffile->read_file(readbuff,size);

    size_t remaining_size = size;

    buff = readbuff;
    while((h = codes_grib_handle_new_from_multi_message(NULL,(void **) &buff,&remaining_size,&error)) != NULL){
      num_handle++;
      codes_handle_delete(h);
    }
    ffile->close();
    delete ffile;
    ffile = NULL;
  }
  else{
    file = fopen(filename,"r");
    if(file == NULL){
      return _ERRORCODE_FILENOTFOUND;
    }
    while((h = codes_handle_new_from_file(0,file,PRODUCT_GRIB,&error)) != NULL){
      num_handle++;
      codes_handle_delete(h);
    }
    fclose(file);

    file = fopen(filename,"r");
  }
  codes_handle **candidates = new codes_handle *[num_handle];
  int i,j,k;
  for(i=0;i<num_handle;i++){
    candidates[i] = NULL;
  }

  char *rec_param = new char [BUFFSIZE];
  char *rec_valid_date = new char [BUFFSIZE];
  char *rec_valid_time = new char [BUFFSIZE];

  char *rec_shortname = new char [BUFFSIZE];
  char *rec_level = new char [BUFFSIZE];

  int count = 0;

  size_t rec_nsize;
  date_time rec_time;
  bool found = false;
  size_t vlen=BUFFSIZE;
  size_t remaining_size = size;
  buff = readbuff;
  while((sftpfile?((h = codes_grib_handle_new_from_multi_message(NULL,(void **) &buff,&remaining_size,&error)) != NULL):((h = codes_handle_new_from_file(0,file,PRODUCT_GRIB,&error)) != NULL))){
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"validityDate",rec_valid_date,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"validityTime",rec_valid_time,&vlen),0);
    if(strlen(rec_valid_time)<4){
      strcat(rec_valid_date,"0");
    }
    strcat(rec_valid_date,rec_valid_time);
    rec_time.set_time(rec_valid_date);

    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"shortName",rec_shortname,&vlen),0);
    vlen=BUFFSIZE;
    CODES_CHECK(codes_get_string(h,"level",rec_level,&vlen),0);

    //std::cout << rec_valid_date << " " << rec_shortname << "|" << rec_level << "|" << endl;
 
    if((valid_time == NOTIME || rec_time == valid_time) && strcmp(rec_shortname,variables) == 0 && (levels == NULL || strcmp(rec_level,levels) == 0)){
      found = true;
      candidates[count] = codes_handle_clone(h);
      count++;
      for(i=0;i<num_param;i++){
	vlen=BUFFSIZE;
	CODES_CHECK(codes_get_string(h,param_name[i],rec_param,&vlen),0);

	if(strcmp(rec_param,param_value[i]) != 0){
	  //cout << rec_param << " " << param_value[i] << endl;
	  found = false;
	  break;
	}
      }

      if(found){
	codes_get_size(h,"values",&rec_nsize);
	if(rec==NULL){
	  nsize = rec_nsize;
	  rec = new double [nsize];
	}

	codes_get_double_array(h,"values",rec,&rec_nsize);
	codes_get_double(h,"missingValue",&missing);
	codes_handle_delete(h);
	break;
      }
      else{
	codes_handle_delete(h);
      }
    }
    else{
      codes_handle_delete(h);
    }
  }

  error = _ERRORCODE_NOERROR;

  //allow for using larger domain to fill in the data
  if(!found){
    double first_lat=-999.,last_lat=-999.,first_lon=-999.,last_lon=-999.;
    double delta_lat = 0.,delta_lon = 0.;

    int lat_grid[2], lon_grid[2];
    int lat_grid_req[2], lon_grid_req[2];
    int req_nx,req_ny;

    int iScanNeg=-1, jScanPos=-1;

    for(j=0;j<num_param;j++){
      if(strstr(param_name[j],"latitudeOf")!=NULL && strstr(param_name[j],"First")!=NULL){
	first_lat = atof(param_value[j]);
      }
      else if(strstr(param_name[j],"latitudeOf")!=NULL && strstr(param_name[j],"Last")!=NULL){
	last_lat = atof(param_value[j]);
      }
      else if(strstr(param_name[j],"longitudeOf")!=NULL && strstr(param_name[j],"First")!=NULL){
	first_lon = atof(param_value[j]);
      }
      else if(strstr(param_name[j],"longitudeOf")!=NULL && strstr(param_name[j],"Last")!=NULL){
	last_lon = atof(param_value[j]);
      }
      else if(strstr(param_name[j],"iDirection")!=NULL && strstr(param_name[j],"Increment")!=NULL){
	delta_lon = atof(param_value[j]);
      }
      else if(strstr(param_name[j],"jDirection")!=NULL && strstr(param_name[j],"Increment")!=NULL){
	delta_lat = atof(param_value[j]);
      }
      else if(strcmp(param_name[j],"iScansNegatively")==0){
	iScanNeg = atoi(param_value[j]);
      }
      else if(strcmp(param_name[j],"jScansPositively")==0){
	jScanPos = atoi(param_value[j]);
      }
    }

    //std::cout << error << " " << first_lat << " " << last_lat << " " << first_lon << " " << last_lon << " " << delta_lat << " " << delta_lon << " " << iScanNeg << " " << jScanPos << endl;

    double st_lat, st_lon;
    int max_nx;
    if(jScanPos > 0){
      st_lat = -90.;
    }
    else if(jScanPos == 0){
      st_lat = 90.;
    }
    else{
      error = _ERRORCODE_GRIBDATA_NOTFOUND;
    }
    if(iScanNeg == 0){
      st_lon = -180.;
    }
    else if(iScanNeg > 0){
      st_lon = 180.;
    }
    else{
      error = _ERRORCODE_GRIBDATA_NOTFOUND;
    }

    if(first_lat < -90. || last_lat < -90. ||	first_lon < -180. || last_lon < -180.){
      error = _ERRORCODE_NOTIMPLEMENTED;
    }
    
    if(error == _ERRORCODE_NOERROR){
      lat_grid_req[0] = (int) round(fabs((first_lat - st_lat)/delta_lat));
      lat_grid_req[1] = (int) round(fabs((last_lat - st_lat)/delta_lat));
      lon_grid_req[0] = (int) round(fabs((first_lon - st_lon)/delta_lon));
      lon_grid_req[1] = (int) round(fabs((last_lon - st_lon)/delta_lon));

      max_nx = ((int) round(360./delta_lon));

      req_nx = (int) round(fabs((last_lon - first_lon)/delta_lon)) + 1;
      req_ny = (int) round(fabs((last_lat - first_lat)/delta_lat)) + 1;
      
      // std::cout << error << " " << lat_grid_req[0] << " " << lat_grid_req[1] << " " << lon_grid_req[0] << " " << lon_grid_req[1] << " " << max_nx <<  " " << req_nx <<  " " << req_ny << std::endl;

      if(lon_grid_req[0] == max_nx){
	lon_grid_req[0] = 0;
      }

      for(i=0;i<count;i++){
	first_lat=-999.;
	last_lat=-999.;
	first_lon=-999.;
	last_lon=-999.;
	found = true;
	for(j=0;j<num_param;j++){
	  vlen=BUFFSIZE;
	  CODES_CHECK(codes_get_string(candidates[i],param_name[j],rec_param,&vlen),0);
	  //std::cout << "j = " << j << " " << param_name[j] << " " << rec_param << std::endl;
	  if(strstr(param_name[j],"latitudeOf")!=NULL && strstr(param_name[j],"First")!=NULL){
	    first_lat = atof(rec_param);
	  }
	  else if(strstr(param_name[j],"latitudeOf")!=NULL && strstr(param_name[j],"Last")!=NULL){
	  last_lat = atof(rec_param);
	  }
	  else if(strstr(param_name[j],"longitudeOf")!=NULL && strstr(param_name[j],"First")!=NULL){
	    first_lon = atof(rec_param);
	  }
	  else if(strstr(param_name[j],"longitudeOf")!=NULL && strstr(param_name[j],"Last")!=NULL){
	    last_lon = atof(rec_param);
	  }
	  else{
	    if(strcmp(rec_param,param_value[j]) != 0){
	      found = false;
	      break;
	    }
	  }
	}

	if(found){
	  //std::cout << "i = " << i << " " << first_lat << " " << last_lat << " " << first_lon << " " << last_lon << std::endl;
	  
	  if(first_lat < -180. || last_lat < -180. || first_lon < -180. || last_lon < -180.){
	    error = _ERRORCODE_NOTIMPLEMENTED;
	    found = false;
	    break;
	  }

	  lat_grid[0] = (int) round(fabs((first_lat - st_lat)/delta_lat));
	  lat_grid[1] = (int) round(fabs((last_lat - st_lat)/delta_lat));
	  lon_grid[0] = (int) round(fabs((first_lon - st_lon)/delta_lon));
	  lon_grid[1] = (int) round(fabs((last_lon - st_lon)/delta_lon));
	  
	  if(lon_grid[0] == max_nx){
	    lon_grid[0] = 0;
	  }
	  else if(lon_grid[0] > lon_grid[1]){
	    lon_grid[1] += max_nx;
	  }

	  //std::cout << error << " " << lat_grid[0] << " " << lat_grid[1] << " " << lon_grid[0] << " " << lon_grid[1] << std::endl;

	  if(lat_grid[0] > lat_grid_req[0] || lat_grid[1] < lat_grid_req[1] || lon_grid[0] > lon_grid_req[0] || (lon_grid_req[1] == max_nx?lon_grid[0]!=0:lon_grid[1] < lon_grid_req[1])){
	    //std::cout << "Here" << std::endl;
	    found = false;
	  }
	  
	  if(found){
	    //std::cout << error << " " << lat_grid[0] << " " << lat_grid[1] << " " << lon_grid[0] << " " << lon_grid[1] << " " << max_nx <<  " " << req_nx <<  " " << req_ny << std::endl;
	    //found a data with a large enough domain to cover the desired reqion
	    int file_nx,file_ny;
	    file_ny = lat_grid[1] - lat_grid[0] + 1;
	    file_nx = lon_grid[1] - lon_grid[0] + 1;
	    
	    double *file_temp = new double [file_nx*file_ny];
	    rec_nsize = file_nx*file_ny;
	    
	    codes_get_double_array(candidates[i],"values",file_temp,&rec_nsize);
	    codes_get_double(candidates[i],"missingValue",&missing);

	    if(rec==NULL){
	      nsize = req_ny*req_nx;
	      rec = new double [nsize];
	    }
	    
	    for(j=0;j<req_ny;j++){
	      for(k=0;k<req_nx;k++){
		rec[j*req_nx+k] = file_temp[(j-lat_grid[0]+lat_grid_req[0])*file_nx + ((k-lon_grid[0]+lon_grid_req[0])%max_nx)];
	      }
	    }
	    
	    delete [] file_temp;
	    break;
	  }
	}
      }
    }
  }
  
  if(sftpfile){
    delete [] readbuff;
    readbuff = NULL;
  }
  else{
    fclose(file);
  }

  for(i=0;i<count;i++){
    codes_handle_delete(candidates[i]);
  }
  delete [] candidates;

  delete [] rec_param;
  delete [] rec_valid_date;
  delete [] rec_valid_time;
  delete [] rec_shortname;
  delete [] rec_level;

  if(!found){
    return _ERRORCODE_GRIBDATA_NOTFOUND;
  }

  return _ERRORCODE_NOERROR;
  */
  int error;
  return *grib_tools_get_rec_with_levels_variables(filename,1,&levels,&variables,valid_time,num_param,param_name,param_value,&nsize,&rec,missing,&error);
}
int* grib_tools_get_rec_with_levels_variables(char* filename,int nvariable,char **levels,char **variables,date_time valid_time,int num_param,char **param_name,char **param_value,int *nsize,double** rec,double &missing,int *error){ //if param_name content latitudeO+First/Last, longitudeOf + First/Last, iDirection, jDirection, the code will try to search for a domain large enough to cover the desired area if exact match cannot be found
  int i,j,k;
  for(i=0;i<nvariable;i++){
    error[i] = _ERRORCODE_NOERROR;
  }

  libjeff::file_handler* ffile = NULL;
  int num_handle = 0;
  codes_handle *h = NULL;

  char *readbuff = NULL;
  char *buff;
  size_t size;

  openfile(ffile,filename);

  if(ffile == NULL){
    for(k=0;k<nvariable;k++){
      error[k] = _ERRORCODE_GRIBDATA_NOTFOUND;
    }
    return error;
  }

  ffile->read_file(readbuff,size);

  size_t remaining_size = size;

  int eccode_error;

  buff = readbuff;
  //while((h = codes_grib_handle_new_from_multi_message(NULL,(void **) &buff,&remaining_size,&eccode_error)) != NULL){
  while(remaining_size > 0){
    size_t message_size;
    h = codes_handle_new_from_message(0,buff,remaining_size);
    codes_get_message_size(h,&message_size);
    num_handle++;
    codes_handle_delete(h);
    buff += message_size;
    remaining_size -= message_size;
  }
  ffile->close();
  delete ffile;
  ffile = NULL;

  codes_handle **candidates = new codes_handle *[num_handle];
  for(i=0;i<num_handle;i++){
    candidates[i] = NULL;
  }

  char *rec_param = new char [BUFFSIZE];
  char *rec_valid_date = new char [BUFFSIZE];
  char *rec_valid_time = new char [BUFFSIZE];

  char *rec_shortname = new char [BUFFSIZE];
  char *rec_level = new char [BUFFSIZE];

  int count = 0;

  size_t rec_nsize;
  date_time rec_time;
  size_t vlen=BUFFSIZE;

  for(k=0;k<nvariable;k++){
    bool found = false;
    buff = readbuff;
    remaining_size = size;
    //while((h = codes_grib_handle_new_from_multi_message(NULL,(void **) &buff,&remaining_size,&eccode_error)) != NULL){
    while(remaining_size > 0){
      size_t message_size;
      h = codes_handle_new_from_message(0,buff,remaining_size);
      codes_get_message_size(h,&message_size);
      buff += message_size;
      remaining_size -= message_size;
      vlen=BUFFSIZE;
      CODES_CHECK(codes_get_string(h,"validityDate",rec_valid_date,&vlen),0);
      vlen=BUFFSIZE;
      CODES_CHECK(codes_get_string(h,"validityTime",rec_valid_time,&vlen),0);
      if(strlen(rec_valid_time)<4){
	strcat(rec_valid_date,"0");
      }
      strcat(rec_valid_date,rec_valid_time);
      rec_time.set_time(rec_valid_date);
      
      vlen=BUFFSIZE;
      CODES_CHECK(codes_get_string(h,"shortName",rec_shortname,&vlen),0);
      vlen=BUFFSIZE;
      CODES_CHECK(codes_get_string(h,"level",rec_level,&vlen),0);
      
      //std::cout << rec_valid_date << " " << rec_shortname << "|" << rec_level << "|" << endl;
      
      if((valid_time == NOTIME || rec_time == valid_time) && strcmp(rec_shortname,variables[k]) == 0 && (levels[k] == NULL || strcmp(rec_level,levels[k]) == 0)){
	found = true;
	candidates[count] = codes_handle_clone(h);
	count++;
	for(i=0;i<num_param;i++){
	  vlen=BUFFSIZE;
	  CODES_CHECK(codes_get_string(h,param_name[i],rec_param,&vlen),0);
	  
	  if(strcmp(rec_param,param_value[i]) != 0){
	    //cout << rec_param << " " << param_value[i] << endl;
	    found = false;
	    break;
	  }
	}
	
	if(found){
	  codes_get_size(h,"values",&rec_nsize);
	  if(rec[k]==NULL){
	    nsize[k] = rec_nsize;
	    rec[k] = new double [nsize[k]];
	  }

	  codes_get_double_array(h,"values",rec[k],&rec_nsize);
	  codes_get_double(h,"missingValue",&missing);

	  codes_handle_delete(h);
	  break;
	}
	else{
	  codes_handle_delete(h);
	}
      }
      else{
	codes_handle_delete(h);
      }
    }

    error[k] = _ERRORCODE_NOERROR;

  //allow for using larger domain to fill in the data
    if(!found){
      double first_lat=-999.,last_lat=-999.,first_lon=-999.,last_lon=-999.;
      double delta_lat = 0.,delta_lon = 0.;
      
      int lat_grid[2], lon_grid[2];
      int lat_grid_req[2], lon_grid_req[2];
      int req_nx,req_ny;
      
      int iScanNeg=-1, jScanPos=-1;
      
      for(j=0;j<num_param;j++){
	if(strstr(param_name[j],"latitudeOf")!=NULL && strstr(param_name[j],"First")!=NULL){
	  first_lat = atof(param_value[j]);
	}
	else if(strstr(param_name[j],"latitudeOf")!=NULL && strstr(param_name[j],"Last")!=NULL){
	  last_lat = atof(param_value[j]);
	}
	else if(strstr(param_name[j],"longitudeOf")!=NULL && strstr(param_name[j],"First")!=NULL){
	  first_lon = atof(param_value[j]);
	}
	else if(strstr(param_name[j],"longitudeOf")!=NULL && strstr(param_name[j],"Last")!=NULL){
	  last_lon = atof(param_value[j]);
	}
	else if(strstr(param_name[j],"iDirection")!=NULL && strstr(param_name[j],"Increment")!=NULL){
	  delta_lon = atof(param_value[j]);
	}
	else if(strstr(param_name[j],"jDirection")!=NULL && strstr(param_name[j],"Increment")!=NULL){
	  delta_lat = atof(param_value[j]);
	}
	else if(strcmp(param_name[j],"iScansNegatively")==0){
	  iScanNeg = atoi(param_value[j]);
	}
	else if(strcmp(param_name[j],"jScansPositively")==0){
	  jScanPos = atoi(param_value[j]);
	}
      }
      
      //std::cout << error << " " << first_lat << " " << last_lat << " " << first_lon << " " << last_lon << " " << delta_lat << " " << delta_lon << " " << iScanNeg << " " << jScanPos << endl;
      
      double st_lat, st_lon;
      int max_nx;
      if(jScanPos > 0){
	st_lat = -90.;
      }
      else if(jScanPos == 0){
	st_lat = 90.;
      }
      else{
	error[k] = _ERRORCODE_GRIBDATA_NOTFOUND;
      }
      if(iScanNeg == 0){
	st_lon = -180.;
      }
      else if(iScanNeg > 0){
	st_lon = 180.;
      }
      else{
	error[k] = _ERRORCODE_GRIBDATA_NOTFOUND;
      }
      
      if(first_lat < -90. || last_lat < -90. ||	first_lon < -180. || last_lon < -180.){
	error[k] = _ERRORCODE_NOTIMPLEMENTED;
      }
    
      if(error[k] == _ERRORCODE_NOERROR){
	lat_grid_req[0] = (int) round(fabs((first_lat - st_lat)/delta_lat));
	lat_grid_req[1] = (int) round(fabs((last_lat - st_lat)/delta_lat));
	lon_grid_req[0] = (int) round(fabs((first_lon - st_lon)/delta_lon));
	lon_grid_req[1] = (int) round(fabs((last_lon - st_lon)/delta_lon));
	
	max_nx = ((int) round(360./delta_lon));
	
	req_nx = (int) round(fabs((last_lon - first_lon)/delta_lon)) + 1;
	req_ny = (int) round(fabs((last_lat - first_lat)/delta_lat)) + 1;
	
	// std::cout << error << " " << lat_grid_req[0] << " " << lat_grid_req[1] << " " << lon_grid_req[0] << " " << lon_grid_req[1] << " " << max_nx <<  " " << req_nx <<  " " << req_ny << std::endl;
	
	if(lon_grid_req[0] == max_nx){
	  lon_grid_req[0] = 0;
	}
	
	for(i=0;i<count;i++){
	  first_lat=-999.;
	  last_lat=-999.;
	  first_lon=-999.;
	  last_lon=-999.;
	  found = true;
	  for(j=0;j<num_param;j++){
	    vlen=BUFFSIZE;
	    CODES_CHECK(codes_get_string(candidates[i],param_name[j],rec_param,&vlen),0);
	    //std::cout << "j = " << j << " " << param_name[j] << " " << rec_param << std::endl;
	    if(strstr(param_name[j],"latitudeOf")!=NULL && strstr(param_name[j],"First")!=NULL){
	      first_lat = atof(rec_param);
	    }
	    else if(strstr(param_name[j],"latitudeOf")!=NULL && strstr(param_name[j],"Last")!=NULL){
	      last_lat = atof(rec_param);
	    }
	    else if(strstr(param_name[j],"longitudeOf")!=NULL && strstr(param_name[j],"First")!=NULL){
	      first_lon = atof(rec_param);
	    }
	    else if(strstr(param_name[j],"longitudeOf")!=NULL && strstr(param_name[j],"Last")!=NULL){
	      last_lon = atof(rec_param);
	    }
	    else{
	      if(strcmp(rec_param,param_value[j]) != 0){
		found = false;
		break;
	      }
	    }
	  }
	  
	  if(found){
	    //std::cout << "i = " << i << " " << first_lat << " " << last_lat << " " << first_lon << " " << last_lon << std::endl;
	    
	    if(first_lat < -180. || last_lat < -180. || first_lon < -180. || last_lon < -180.){
	      error[k] = _ERRORCODE_NOTIMPLEMENTED;
	      found = false;
	      break;
	    }
	    
	    lat_grid[0] = (int) round(fabs((first_lat - st_lat)/delta_lat));
	    lat_grid[1] = (int) round(fabs((last_lat - st_lat)/delta_lat));
	    lon_grid[0] = (int) round(fabs((first_lon - st_lon)/delta_lon));
	    lon_grid[1] = (int) round(fabs((last_lon - st_lon)/delta_lon));
	    
	    if(lon_grid[0] == max_nx){
	      lon_grid[0] = 0;
	    }
	    else if(lon_grid[0] > lon_grid[1]){
	      lon_grid[1] += max_nx;
	    }
	    
	    //std::cout << error << " " << lat_grid[0] << " " << lat_grid[1] << " " << lon_grid[0] << " " << lon_grid[1] << std::endl;
	    
	    if(lat_grid[0] > lat_grid_req[0] || lat_grid[1] < lat_grid_req[1] || lon_grid[0] > lon_grid_req[0] || (lon_grid_req[1] == max_nx?lon_grid[0]!=0:lon_grid[1] < lon_grid_req[1])){
	      //std::cout << "Here" << std::endl;
	      found = false;
	    }
	    
	    if(found){
	      //std::cout << error << " " << lat_grid[0] << " " << lat_grid[1] << " " << lon_grid[0] << " " << lon_grid[1] << " " << max_nx <<  " " << req_nx <<  " " << req_ny << std::endl;
	      //found a data with a large enough domain to cover the desired reqion
	      int file_nx,file_ny;
	      file_ny = lat_grid[1] - lat_grid[0] + 1;
	      file_nx = lon_grid[1] - lon_grid[0] + 1;
	      
	      double *file_temp = new double [file_nx*file_ny];
	      rec_nsize = file_nx*file_ny;
	    
	      codes_get_double_array(candidates[i],"values",file_temp,&rec_nsize);
	      codes_get_double(candidates[i],"missingValue",&missing);

	      if(rec[k]==NULL){
		nsize[k] = req_ny*req_nx;
		rec[k] = new double [nsize[k]];
	      }
	    
	      int m;
	      for(j=0;j<req_ny;j++){
		for(m=0;m<req_nx;m++){
		  rec[k][j*req_nx+m] = file_temp[(j-lat_grid[0]+lat_grid_req[0])*file_nx + ((m-lon_grid[0]+lon_grid_req[0])%max_nx)];
		}
	      }
	      
	      delete [] file_temp;
	      break;
	    }
	  }
	}
      }
    }
    
    if(!found){
      error[k] = _ERRORCODE_GRIBDATA_NOTFOUND;
    }
    
  }

  delete [] readbuff;
  readbuff = NULL;

  for(i=0;i<count;i++){
    codes_handle_delete(candidates[i]);
  }
  delete [] candidates;

  delete [] rec_param;
  delete [] rec_valid_date;
  delete [] rec_valid_time;
  delete [] rec_shortname;
  delete [] rec_level;

  return error;
}

int grib_tools_encode_grib(char *sample_file,const libjeff::grid_data_field* fields,int zindex,long centerID,long level,char *variables,date_time modelrun,double missingValue,int nkeys,char **keys,char **key_values,char* &buffer,size_t &size){
  return grib_tools_encode_grib(sample_file,fields,zindex,centerID,level,variables,modelrun,missingValue,nkeys,keys,key_values,true,buffer,size);
}
int grib_tools_encode_grib(char *sample_file,const libjeff::grid_data_field* fields,int zindex,long centerID,long level,char *variables,date_time modelrun,double missingValue,int nkeys,char **keys,char **key_values,bool asdouble,char* &buffer,size_t &size){
  int error = _ERRORCODE_NOERROR;
  if(buffer != NULL){
    return _ERRORCODE_MEMORYNOTFREE;
  }
  codes_handle *h = NULL;
  if(fields==NULL || ((fields->get_grid_data()->get_grid_code() == REGULAR_GRID_CODE) && (strcmp(sample_file,"regular_ll_pl_grib2") == 0 || strcmp(sample_file,"regular_ll_pl_grib1") == 0 || strcmp(sample_file,"regular_ll_sfc_grib2") == 0 || strcmp(sample_file,"regular_ll_sfc_grib1") == 0))){
    h = codes_grib_handle_new_from_samples(NULL,sample_file);
    
    const void* buff = NULL;
    
    size_t str_len = 0;
    codes_set_long(h,"centre",centerID);
    codes_set_string(h,"shortName",variables,&str_len);
    codes_set_long(h,"level",level);//,&str_len);
    
    char *ctemp = new char [BUFFSIZE];
    
    codes_set_long(h,"date",atoll(modelrun.get_time("yyyymmdd",ctemp)));//,&str_len);
    codes_set_long(h,"hour",modelrun.get_hour());
    codes_set_long(h,"minute",modelrun.get_minute());
    codes_set_long(h,"second",modelrun.get_second());

    codes_set_double(h,"missingValue",missingValue);
    int i,j;
    if(fields != NULL){
      if(asdouble){
	double *dtemp = new double [fields->get_nx()*fields->get_ny()];
      
	if(fields->get_y(0,0,zindex) < fields->get_y(0,fields->get_ny()-1,zindex)){
	  for(j=0;j<fields->get_ny();j++){
	    for(i=0;i<fields->get_nx();i++){
	      dtemp[(fields->get_ny()-1-j)*fields->get_nx() + i] = *(fields->get_data(i,j,zindex));
	    }
	  }
	  codes_set_double(h,"latitudeOfFirstGridPointInDegrees",fields->get_y(0,fields->get_ny()-1,zindex));
	  codes_set_double(h,"latitudeOfLastGridPointInDegrees",fields->get_y(0,0,zindex));
	}
	else{
	  for(j=0;j<fields->get_ny();j++){
	    for(i=0;i<fields->get_nx();i++){
	      dtemp[j*fields->get_nx() + i] = *(fields->get_data(i,j,zindex));
	    }
	  }
	  codes_set_double(h,"latitudeOfFirstGridPointInDegrees",fields->get_y(0,0,zindex));
	  codes_set_double(h,"latitudeOfLastGridPointInDegrees",fields->get_y(0,fields->get_ny()-1,zindex));
	}
	codes_set_double_array(h,"values",dtemp,fields->get_nx()*fields->get_ny());

	delete [] dtemp;
      }
      else{
	float *ftemp = new float [fields->get_nx()*fields->get_ny()];
      
	if(fields->get_y(0,0,zindex) < fields->get_y(0,fields->get_ny()-1,zindex)){
	  for(j=0;j<fields->get_ny();j++){
	    for(i=0;i<fields->get_nx();i++){
	      ftemp[(fields->get_ny()-1-j)*fields->get_nx() + i] = *(fields->get_data(i,j,zindex));
	    }
	  }
	  codes_set_double(h,"latitudeOfFirstGridPointInDegrees",fields->get_y(0,fields->get_ny()-1,zindex));
	  codes_set_double(h,"latitudeOfLastGridPointInDegrees",fields->get_y(0,0,zindex));
	}
	else{
	  for(j=0;j<fields->get_ny();j++){
	    for(i=0;i<fields->get_nx();i++){
	      ftemp[j*fields->get_nx() + i] = *(fields->get_data(i,j,zindex));
	    }
	  }
	  codes_set_double(h,"latitudeOfFirstGridPointInDegrees",fields->get_y(0,0,zindex));
	  codes_set_double(h,"latitudeOfLastGridPointInDegrees",fields->get_y(0,fields->get_ny()-1,zindex));
	}
	size_t outsize;
	outsize = fields->get_nx()*fields->get_ny()*sizeof(float);
	codes_set_bytes(h,"values",(unsigned char* ) ftemp,&outsize);
	delete [] ftemp;
      }
    
      codes_set_long(h,"Ni",fields->get_nx());
      codes_set_long(h,"Nj",fields->get_ny());
      codes_set_long(h,"iScansNegatively",0);
      codes_set_long(h,"jScansPositively",0);
      
      codes_set_double(h,"longitudeOfFirstGridPointInDegrees",fields->get_x(0,0,zindex));
      codes_set_double(h,"longitudeOfLastGridPointInDegrees",fields->get_x(fields->get_nx()-1,0,zindex));
      
      codes_set_double(h,"iDirectionIncrementInDegrees",fabs(fields->get_x(1,0,zindex) - fields->get_x(0,0,zindex)));
      codes_set_double(h,"jDirectionIncrementInDegrees",fabs(fields->get_y(0,1,zindex) - fields->get_y(0,0,zindex)));
    }
    delete [] ctemp;

    for(i=0;i<nkeys;i++){
      codes_set_string(h,keys[i],key_values[i],&str_len);
    }
    
    codes_get_message(h,&buff,&size);
    if(libjeff::debug_setting::get_debug_mode_debug_message()){
      std::cout << "Read " << size << " from the grib template" << std::endl;
    }
    
    buffer = new char [size];
    memcpy(buffer,buff,size);
  }
  else{
    size = 0;
    error = _ERRORCODE_NOTIMPLEMENTED;
  }
  codes_handle_delete(h);

  return error;
}
