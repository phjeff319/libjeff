#include "timed_grid_data.h"

#include "error_code.h"
#include "grid_codes.h"

#include "date_time.h"

#include "grid_data.h"

timed_grid_data::timed_grid_data(){
  num_data_time = 0;
  data_time = NULL;
  data_grid = NULL;
  missing_value = -9999.;
}
timed_grid_data::~timed_grid_data(){
  this->destroy();
}

###CPP### ###CUDA### ###HOST### int timed_grid_data::create(int num_time,void (*allocation)(grid_data* &in)){
//cout << "Entering timed_grid_data create" << endl;
  if(num_time <= 0){
    return _ERRORCODE_INPUTERROR;
  }

  this->destroy();
  this->num_data_time = num_time;
  data_time = new date_time [this->num_data_time];

  this->data_grid = new grid_data* [this->num_data_time];

  int i;
  for(i=0;i<this->num_data_time;i++){
    (*allocation)(data_grid[i]);
  }

  return _ERRORCODE_NOERROR;
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::destroy(){
  if(num_data_time > 0){
    int i;
    for(i=0;i<num_data_time;i++){
      if(data_grid[i] != NULL){
	delete data_grid[i];
      }
    }
    delete [] data_grid;
    delete [] data_time;
  }
  num_data_time = 0;
}

###CPP### ###CUDA### ###HOST### int timed_grid_data::set_data_time(date_time *in){
  if(num_data_time <= 0){
    return _ERRORCODE_DATAYETTOBEINITIATED;
  }

  int i;
  for(i=0;i<num_data_time;i++){
    data_time[i] = in[i];
  }

  return _ERRORCODE_NOERROR;
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::set_x(int ix,int iy,int iz,double x){
  int i;
  for(i=0;i<num_data_time;i++){
    if(this->get_data_grid()[i]->get_nx()>ix){
      (this->get_data_grid())[i]->set_x(ix,iy,iz,x);
    }
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::set_y(int ix,int iy,int iz,double y){
  int i;
  for(i=0;i<num_data_time;i++){
    if(this->get_data_grid()[i]->get_ny()>iy){
      (this->get_data_grid())[i]->set_y(ix,iy,iz,y);
    }
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::set_z(int ix,int iy,int iz,double z){
  int i;
  for(i=0;i<num_data_time;i++){
    if(this->get_data_grid()[i]->get_nz()>iz){
      (this->get_data_grid())[i]->set_z(ix,iy,iz,z);
    }
  }
}
###CPP### ###CUDA### ###HOST### int timed_grid_data::set_x(double *x){
  if(this->num_data_time > 0 && (this->data_grid)[0]->get_grid_code() != 0 && (this->data_grid)[0]->get_nx() > 0 && (this->data_grid)[0]->get_ny() > 0 && (this->data_grid)[0]->get_nz() > 0 && (this->data_grid)[0]->get_ndim() > 0){
    int i;
    for(i=0;i<this->num_data_time;i++){
      (this->get_data_grid())[i]->set_x(x);
    }
    return _ERRORCODE_NOERROR;
  }
  else{
    return _ERRORCODE_DATAYETTOBEINITIATED;
  }
}
###CPP### ###CUDA### ###HOST### int timed_grid_data::set_y(double* y){
  if(this->num_data_time > 0 && (this->data_grid)[0]->get_grid_code() != 0 && (this->data_grid)[0]->get_nx() > 0 && (this->data_grid)[0]->get_ny() > 0 && (this->data_grid)[0]->get_nz() > 0 && (this->data_grid)[0]->get_ndim() > 0){
    int i;
    for(i=0;i<this->num_data_time;i++){
      (this->get_data_grid())[i]->set_y(y);
    }
    return _ERRORCODE_NOERROR;
  }
  else{
    return _ERRORCODE_DATAYETTOBEINITIATED;
  }
}
###CPP### ###CUDA### ###HOST### int timed_grid_data::set_z(double* z){
  if(this->num_data_time > 0 && (this->data_grid)[0]->get_grid_code() != 0 && (this->data_grid)[0]->get_nx() > 0 && (this->data_grid)[0]->get_ny() > 0 && (this->data_grid)[0]->get_nz() > 0 && (this->data_grid)[0]->get_ndim() > 0){
    int i;
    for(i=0;i<this->num_data_time;i++){
      (this->get_data_grid())[i]->set_z(z);
    }
    return _ERRORCODE_NOERROR;
  }
  else{
    return _ERRORCODE_DATAYETTOBEINITIATED;
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::set_data_grid(grid_data** in){
  int i;
  for(i=0;i<num_data_time;i++){
    *(data_grid[i]) = *(in[i]);
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::set_x_periodic(){
  int i;
  for(i=0;i<num_data_time;i++){
    data_grid[i]->set_x_periodic();
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::unset_x_periodic(){
  int i;
  for(i=0;i<num_data_time;i++){
    data_grid[i]->unset_x_periodic();
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::set_y_periodic(){
  int i;
  for(i=0;i<num_data_time;i++){
    data_grid[i]->set_y_periodic();
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::unset_y_periodic(){
  int i;
  for(i=0;i<num_data_time;i++){
    data_grid[i]->unset_y_periodic();
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::set_z_periodic(){
  int i;
  for(i=0;i<num_data_time;i++){
    data_grid[i]->set_z_periodic();
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::unset_z_periodic(){
  int i;
  for(i=0;i<num_data_time;i++){
    data_grid[i]->unset_z_periodic();
  }
}

###CPP### ###CUDA### ###HOST### void timed_grid_data::set_x_period(double in){
  int i;
  for(i=0;i<num_data_time;i++){
    data_grid[i]->set_x_period(in);
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::set_y_period(double in){
  int i;
  for(i=0;i<num_data_time;i++){
    data_grid[i]->set_y_period(in);
  }
}
###CPP### ###CUDA### ###HOST### void timed_grid_data::set_z_period(double in){
  int i;
  for(i=0;i<num_data_time;i++){
    data_grid[i]->set_z_period(in);
  }
}

###CPP### ###CUDA### ###HOST### int timed_grid_data::multiple_linear_interpolate_from(const timed_grid_data* in){
  return _ERRORCODE_NOERROR;
}
###CPP### ###CUDA### ###HOST### double* timed_grid_data::multiple_linear_interpolate(date_time vtime,double x, double y, double z, double *temp){
/*
  if(num_data_time > 1){
    int i;
    int time_index = -99;
    for(i=0;i<num_data_time-1;i++){
      if((vtime >= data_time[i] && vtime < data_time[i+1]) || (vtime < data_time[i] && vtime >= data_time[i+1])){
	time_index = i;
	break;
      }
    }

    if(time_index < 0){
      if(vtime == data_time[num_data_time-1]){
	time_index = num_data_time-2;
      }
    }

    if(time_index >= 0){
      double *pt1, *pt2;
      pt1 = new double [data_grid[time_index]->get_ndim()];
      pt2 = new double [data_grid[time_index]->get_ndim()];

      (this->data_grid)[time_index]->multiple_linear_interpolate(x,y,z,pt1);
      (this->data_grid)[time_index+1]->multiple_linear_interpolate(x,y,z,pt2);

      double ratio = vtime.get_ratio_between(data_time[time_index],data_time[time_index+1]);
      for(i=0;i<data_grid[time_index]->get_ndim();i++){
	temp[i] = pt1[i]*(1-ratio) + ratio*pt2[i];
      }

      delete [] pt1;
      delete [] pt2;
    }
    else{
      return NULL;
    }
  }
  else{
    return (this->data_grid)[0]->multiple_linear_interpolate(x,y,z,temp);
  }

  return temp;
  */
  return this->multiple_linear_interpolate(vtime,x,y,z,NULL,temp);
}
###CPP### ###CUDA### ###HOST### double* timed_grid_data::multiple_linear_interpolate(date_time vtime,double x, double y, double z, double *missing,double *temp){
  if(num_data_time > 1){
    int i;
    int time_index = -99;
    for(i=0;i<num_data_time-1;i++){
      if((vtime >= data_time[i] && vtime < data_time[i+1]) || (vtime < data_time[i] && vtime >= data_time[i+1])){
	time_index = i;
	break;
      }
    }

    if(time_index < 0){
      if(vtime == data_time[num_data_time-1]){
	time_index = num_data_time-2;
      }
    }

    if(time_index >= 0){
      double *pt1, *pt2;
      pt1 = new double [data_grid[time_index]->get_ndim()];
      pt2 = new double [data_grid[time_index]->get_ndim()];

      (this->data_grid)[time_index]->multiple_linear_interpolate(x,y,z,missing,pt1);
      (this->data_grid)[time_index+1]->multiple_linear_interpolate(x,y,z,missing,pt2);

      double ratio = vtime.get_ratio_between(data_time[time_index],data_time[time_index+1]);
      for(i=0;i<data_grid[time_index]->get_ndim();i++){
	if(missing != NULL && (pt1[i] == *missing || pt2[i] == *missing)){
	  temp[i] = *missing;
	}
	else{
	  temp[i] = pt1[i]*(1-ratio) + ratio*pt2[i];
	}
      }

      delete [] pt1;
      delete [] pt2;
    }
    else{
      return NULL;
    }
  }
  else{
    return (this->data_grid)[0]->multiple_linear_interpolate(x,y,z,temp);
  }

  return temp;
}
