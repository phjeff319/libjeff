#include<iostream>
#include<cmath>
using namespace std;

#include <gsl/gsl_math.h>
#include <gsl/gsl_sf_gamma.h>

#include "debug_mode.h"
#include "error_code.h"
#include "math_special_function.h"
#include "physics_constants.h"
#include "tools.h"

namespace libjeff{
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_plank_distribution(double temperature,double frequency){
  //return (2.*phys_h*std::pow(frequency,3))/(std::pow(phys_c,2)*(exp(phys_h*frequency/(phys_k0*temperature)) - 1.));
    return (2.*phys_h*frequency*frequency*frequency)/(phys_c*phys_c*(exp(phys_h*frequency/(phys_k0*temperature)) - 1.));
  }
  
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_cal_brightness_temperature(double intensity,double frequency){
    return phys_h*frequency/(phys_k0*log((2.*phys_h*libjeff::pow(frequency,3.))/(intensity*libjeff::pow(phys_c,2.))+1.));
  }
  
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_lagrange_interpolation(int npoint,double x,double data[][2]){
    double sum = 0., temp_sum;
    int i,j;
    
    for(i=0;i<npoint;i++){
      temp_sum = data[i][1];
      for(j=0;j<npoint;j++){
	if(i!=j){
	  temp_sum *= (x - data[j][0])/(data[i][0] - data[j][0]);
	}
      }
      sum += temp_sum;
    }
    return sum;
  }

  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_lagrange_interpolation(int npoint,double x,double *grid_point,double *grid_value){
    double sum = 0., temp_sum;
    int i,j;
    
    for(i=0;i<npoint;i++){
      temp_sum = grid_value[i];
      for(j=0;j<npoint;j++){
	if(i!=j){
	  temp_sum *= (x - grid_point[j])/(grid_point[i] - grid_point[j]);
	}
      }
      sum += temp_sum;
    }
    return sum;
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_bilinear_interpolate(double *point,double *lat, double *lon, double *grid_value){
    return (grid_value[0]*(lon[1] - point[1])*(lat[1] - point[0]) + grid_value[1]*(point[1] - lon[0])*(lat[1] - point[0]) + grid_value[2]*(lon[1] - point[1])*(point[0] - lat[0]) + grid_value[3]*(point[1] - lon[0])*(point[0] - lat[0]))/((lon[1] - lon[0])*(lat[1] - lat[0]));
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_multilinear_interpolate(int ndim, double *point, double *grid_point, double *grid_value){
    //assume rectangular grid. grid_point of the dimension[ndim*2]

    if(ndim == 1){
      return (grid_value[1]*(point[0] - grid_point[0]) + grid_value[0]*(grid_point[1] - point[0]))/(grid_point[1] - grid_point[0]);
    }
    else{
      return (math_multilinear_interpolate(ndim-1,point,grid_point,grid_value+pow(2,ndim-1))*(point[ndim-1] - grid_point[2*(ndim-1)]) + math_multilinear_interpolate(ndim-1,point,grid_point,grid_value)*(grid_point[2*(ndim-1)+1] - point[ndim-1]))/(grid_point[2*(ndim-1)+1] - grid_point[2*(ndim-1)]);
    }
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_multilinear_interpolate(int ndim, double missing_value, double *point, double *grid_point, double *grid_value){
    //assume rectangular grid. grid_point of the dimension[ndim*2]

    if(ndim == 1){
      if(fabs(grid_value[0] - missing_value) > 0.0001 && fabs(grid_value[1] - missing_value) > 0.0001){
	return (grid_value[1]*(point[0] - grid_point[0]) + grid_value[0]*(grid_point[1] - point[0]))/(grid_point[1] - grid_point[0]);
      }
      else{
	return missing_value;
      }
    }
    else{
      double value1 = math_multilinear_interpolate(ndim-1,point,grid_point,grid_value+pow(2,ndim-1));
      double value2 = math_multilinear_interpolate(ndim-1,point,grid_point,grid_value);
      if(fabs(value1 - missing_value) > 0.0001 && fabs(value2 - missing_value) > 0.0001){
	return (value1*(point[ndim-1] - grid_point[2*(ndim-1)]) + value2*(grid_point[2*(ndim-1)+1] - point[ndim-1]))/(grid_point[2*(ndim-1)+1] - grid_point[2*(ndim-1)]);
      }
      else{
	return missing_value;
      }
    }
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_multilinear_interpolate(int ndim, double *point, double **grid_point, double *grid_value){
    //assume rectangular grid. grid_point of the dimension[ndim][2]

    if(ndim == 1){
      return (grid_value[1]*(point[0] - grid_point[0][0]) + grid_value[0]*(grid_point[0][1] - point[0]))/(grid_point[0][1] - grid_point[0][0]);
    }
    else{
      return (math_multilinear_interpolate(ndim-1,point,grid_point,grid_value+pow(2,ndim-1))*(point[ndim-1] - grid_point[ndim-1][0]) + math_multilinear_interpolate(ndim-1,point,grid_point,grid_value)*(grid_point[ndim-1][1] - point[ndim-1]))/(grid_point[ndim-1][1] - grid_point[ndim-1][0]);
    }
  }

  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_multicubic_interpolate(int ndim, double *point, double *grid_point, double *grid_value){
    if(ndim==1){
      return math_lagrange_interpolation(4,*point,grid_point,grid_value);
    }
    else{
      double temp_result[4];
      int i;
      for(i=0;i<4;i++){
	temp_result[i] = math_multicubic_interpolate(ndim-1,point,grid_point,grid_value+pow(4,ndim-1)*i);
      }
      return math_multicubic_interpolate(1,point+ndim-1,grid_point+4*(ndim-1),temp_result);
    }
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_multiquasicubic_interpolate(int ndim, double *point, double *grid_point, double *grid_value){
    int i;
    for(i=ndim-1;i>=0;i--){
      
    }
  }

  ###CPP### ###CUDA### ###HOST### ###DEVICE### double plane_metric(int ndim,double *x, double *y){
    double result=0.;
    int i;
    for(i=0;i<ndim;i++){
      result += (x[i]-y[i])*(x[i]-y[i]);
    }
    return pow(result,0.5);
  }
  ###CPP### ###HOST### double math_inv_dist_weight_interpolate(int npt,int ndim,double *point,double **grid_point,double *grid_value){
    return math_inv_dist_weight_interpolate(npt,ndim,point,grid_point,grid_value,plane_metric);
  }
  ###CPP### ###HOST### double math_inv_dist_weight_interpolate(int npt,int ndim,double *point,double **grid_point,double *grid_value,double (*metric)(int,double*, double*)){
    double result=0.;
    int i,j;
    
    double *weight, totalw =0.;
    weight = new double [npt];
    
    for(i=0;i<npt;i++){
      if((*metric)(ndim,point,grid_point[i])>0.000001){
	weight[i] = 1./(*metric)(ndim,point,grid_point[i]);
	totalw += weight[i];
      }
      else{
	for(j=0;j<npt;j++){
	  weight[j] = 0.;
	}
	weight[i] = 1.;
	totalw = 1.;
	break;
      }
    }
    
    for(i=0;i<npt;i++){
      result += grid_value[i]*weight[i];
    }
    result/= totalw;
    
    delete [] weight;
    
    return result;
  }

  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_gaussian_distribution(double x,double mean,double sigma){
    if(sigma > 0){
      double z= (x - mean)/sigma;
      return exp(-.5*z*z)/(sigma*pow(2.*pi,0.5));
    }
    else{
      return -1.;
    }
  }
  ###CUDA### ###GLOBAL### void math_gaussian_distribution(int npt,double *x,double *mean,double *sigma,double *out){
    unsigned int i = blockDim.x*blockIdx.x + threadIdx.x;

    if(i<npt){
      out[i] = math_gaussian_distribution(x[i],mean[i],sigma[i]);
    }
  }
  ###CUDA### ###GLOBAL### void math_gaussian_distribution(int nx,double *x,int nmean,double *mean,int nsigma,double *sigma,double *out){ //out is an array of size nx*nmean*nsigma
    unsigned int i = blockDim.x*blockIdx.x + threadIdx.x;
    unsigned int xindex = i/(nsigma*nmean);
    unsigned int meanindex = (i/nsigma)%nmean;
    unsigned int sigmaindex = i%nsigma;

    if(xindex < nx){
      out[i] =  math_gaussian_distribution(x[xindex],mean[meanindex],sigma[sigmaindex]);
    }
  }
  ###CPP### ###HOST### void math_modified_gamma_distribution(double alpha, double mu, double lambda, int nvalue, double *x, double *y){
    double height = gsl_sf_gammainv(mu)*alpha*pow(lambda,alpha*mu);
    
    int i;
    for(i=0;i<nvalue;i++){
      y[i] = pow(lambda*x[i],alpha);
      y[i] = height*pow(x[i],alpha*mu - 1)*exp(-y[i]);
    }
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_sigmoid(double x){
    return 1./(1.+exp(-x));
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_inv_sigmoid(double x){
    return log(x/(1-x));
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double* math_convert2polar(double *in,double *center,double *out){
    double *diff = new double [2];

    int i;
    for(i=0;i<2;i++){
      diff[i] = in[i] - center[i];
    }
    out[0] = pow(diff[0]*diff[0] + diff[1]*diff[1],0.5);
    out[1] = atan2(diff[1],diff[0]);

    delete [] diff;

    return out;
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double* math_hyperspherical2cartesian(int ndim,double *hyperspherical,double *cartesian){
    int i;
    double temp = hyperspherical[0];
    for(i=0;i<ndim-1;i++){
      cartesian[i] = temp*cos(hyperspherical[i+1]);
      temp *= sin(hyperspherical[i+1]);
    }
    cartesian[ndim-1] = temp;

    return cartesian;
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double* math_cartesian2hyperspherical(int ndim,double *cartesian,double *hyperspherical){
    int i;
    hyperspherical[0] = 0.;
    for(i=0;i<ndim;i++){
      hyperspherical[0] += cartesian[i]*cartesian[i];
    }
    hyperspherical[0] = pow(hyperspherical[0],0.5);

    double temp = hyperspherical[0];
    for(i=1;i<ndim;i++){
      hyperspherical[i] = acos(cartesian[i-1]/temp);
      temp *= sin(hyperspherical[i]);
      if(is_nan(hyperspherical[i])){
	hyperspherical[i] = 0.;
      }
    }

    return hyperspherical;
  }
  
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double math_NCR(int n, int r){
    if(r==0 || r==n){
      return 1.;
    }
    
    int i;
    double denominator=1.;
    
    for(i=1;i<=r;i++){
      denominator *= i;
    }
    
    double nominator=1.;
    for(i=(n-r+1);i<=n;i++){
      nominator *= i;
    }
    
    return nominator/denominator;
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### int pow(int base, int exponent){
    int result = 1;
    
    int i;
    for(i=0;i<abs(exponent);i++){
      result*=base;
    }
    
    return (exponent>0?result:1/result);
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double pow(double base, int exponent){
    double result = 1;
    
    int i;
    for(i=0;i<abs(exponent);i++){
      result*=base;
    }
    
    return (exponent>0?result:1/result);
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double pow(double base,double exponent){
    return std::pow(base,exponent);
    //return exp(exponent*log(base));
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### int abs(int in){
    if(in >= 0){
      return in;
    }
    else{
      return -in;
    }
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### int power_ceiling(int in,int base){
    int result = pow(base,(int) ceil(log(in)/log(base)));

    return result;
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### bool have_root(double data_pt1,double data_pt2,double value){
    if(data_pt1 > value && data_pt2 < value){
      return true;
    }
    else if(data_pt1 < value && data_pt2 > value){
      return true;
    }
    else{
      return false;
    }
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### bool have_root(double data_pt1,double data_pt2,double data_pt3,double data_pt4,double value){
    if(data_pt1 < value && data_pt2 < value && data_pt3 < value && data_pt4 < value){
      return false;
    }
    else if(data_pt1 > value && data_pt2 > value && data_pt3 > value && data_pt4 > value){
      return false;
    }
    else{
      return true;
    }
  }
  ###CPP### ###CUDA### ###HOST### ###DEVICE### double cal_frac(double value1,double value2,double value3){
    return (value1 - value2)/(value3 - value2);
  }

  ###CPP### ###CUDA### ###HOST### int math_cal_ludcomp(double **input, int ndim, double **l, double **u){
    double temp;
    int i,j,k;
    // the diagonal terms of the lower triangular matrix is set to 1
    for(i=0; i < ndim; i++){
      l[i][i] = 1;
    }
    
    for(i=0; i < ndim; i++){
      u[0][i] = input[0][i];
    }
    
    for(i=1; i < ndim; i++){
      l[i][0] = input[i][0]/u[0][0];
    }
    
    for(i=1; i < ndim; i++){
      //for the upper triangular matrix
      for(j=i; j < ndim; j++){
	temp = input[i][j];
	for(k=0; k<i; k++){
	  temp -= l[i][k]*u[k][j];
	}
	u[i][j] = temp;
      }
      
      //for the lower triangular matrix
      for(j=i+1; j < ndim; j++){
	temp = input[j][i];
	for(k=0; k<i; k++){
	  temp -= l[j][k]*u[k][i];
	}
	l[j][i] = temp/u[i][i];
      }
    }

    return _ERRORCODE_NOERROR;
  }

  ###CPP### ###CUDA### ###HOST### int math_numerical_diff(int npt,double *x,double *y,int order,double **nd){
    return math_numerical_diff(npt,x,y,order,0,nd);
  }
  ###CPP### ###CUDA### ###HOST### int math_numerical_diff(int npt,double *x,double *y,int order,int shift,double **nd){
    if(order%2 || order <= 0){
      return _ERRORCODE_INPUTOUTOFRANGE;
    }

    int half_order = order/2;
    double *deltax = new double [order+1];
    double **matrix = new double *[order+1];
    double **umatrix = new double *[order+1];
    double **lmatrix = new double *[order+1];
    double *temp_y = new double [order+1];
    int i,j,k;

    for(i=0;i<order+1;i++){
      matrix[i] = new double [order+1];
      umatrix[i] = new double [order+1];
      lmatrix[i] = new double [order+1];
    }

    for(i=0;i<npt;i++){
      int st_index,end_index;
      if(i < half_order-shift){
	st_index = 0;
	end_index = order;
      }
      else if(i + half_order+shift >= npt){
	st_index = npt-1-order;
	end_index = npt-1;
      }
      else{
	st_index = i-half_order+shift;
	end_index = i+half_order+shift;
      }

      for(j=st_index;j<=end_index;j++){
	deltax[j-st_index] = x[j] - x[i];
      }

      int frac = 1.;
      for(k=0;k<order+1;k++){
	for(j=0;j<order+1;j++){
	  if(k==0){
	    matrix[j][k] = 1.;
	  }
	  else{
	    if(j==0){
	      frac *= k;
	    }
	    matrix[j][k] = libjeff::pow(deltax[j],k)/frac;
	  } 
	}
      }

      math_cal_ludcomp(matrix,order+1,lmatrix,umatrix);

      if(libjeff::debug_setting::get_debug_mode_debug_message()){
	std::cout << i << std::endl;
	std::cout << st_index << " - " << end_index << std::endl;
	for(j=0;j<=order;j++){
	  std::cout << deltax[j] << std::endl;
	}
	for(j=0;j<=order;j++){
	  for(k=0;k<=order;k++){
	    std::cout << matrix[j][k] << " \t";
	  }
	  std::cout << endl;
	}
	std::cout << endl;

	for(j=0;j<=order;j++){
	  for(k=0;k<=order;k++){
	    std::cout << umatrix[j][k] << " \t";
	  }
	  std::cout << endl;
	}
	std::cout << endl;

	for(j=0;j<=order;j++){
	  for(k=0;k<=order;k++){
	    std::cout << lmatrix[j][k] << " \t";
	  }
	  std::cout << endl;
	}
	std::cout << endl;
      }

      temp_y[0] = y[st_index];
      for(j=1;j<order+1;j++){
	temp_y[j] = y[st_index+j];
	for(k=0;k<j;k++){
	  temp_y[j] -= lmatrix[j][k]*temp_y[k];
	}
      }

      nd[i][order-1] = temp_y[order]/umatrix[order][order];
      for(j=order-1;j>=1;j--){
	nd[i][j-1] = temp_y[j];
	for(k=j+1;k<=order;k++){
	  nd[i][j-1] -= umatrix[j][k]*nd[i][k-1];
	}
	nd[i][j-1] /= umatrix[j][j]; 
      }
    }

    delete deltax;
    for(i=0;i<order+1;i++){
      delete [] matrix[i];
      delete [] umatrix[i];
      delete [] lmatrix[i];
    }
    delete [] matrix;
    delete [] umatrix;
    delete [] lmatrix;
    delete [] temp_y;

    return _ERRORCODE_NOERROR;
  }

  namespace hibert_curve{
    ###CPP### ###CUDA### ###HOST### ###DEVICE### int xy2d(int order,int *xy){
      int rxy[2],s,d=0;
      int i,j;
      for(i=order;i>0;i--){
	s=pow(2,i-1);
	for(j=0;j<2;j++){
	  rxy[j] = (xy[j] & s) > 0;
	}
	d+=s*s*((3*rxy[0])^rxy[1]);
	rot(i-1,rxy,xy);
      }
      return d;
    }
    ###CPP### ###CUDA### ###HOST### ###DEVICE### int* d2xy(int order,int d,int* xy){
      int rxy[2],s,t=d;

      xy[0] = 0;
      xy[1] = 0;

      int i;
      for(i=1;i<=order;i++){
	s = pow(2,i-1);
	rxy[0] = 1 & (t/2);
	rxy[1] = 1 & (t^rxy[0]);
	rot(i-1,rxy,xy);
	xy[0] += s*rxy[0];
	xy[1] += s*rxy[1];
	t /= 4;
      }

      return xy;
    }
    ###CPP### ###CUDA### ###HOST### ###DEVICE### int* rot(int n,int *rxy,int *xy){
      if(rxy[1] == 0){
	if(rxy[0] == 1){
	  xy[0] = pow(2,n)-1 - xy[0];
	  xy[1] = pow(2,n)-1 - xy[1];
	}

	int t = xy[0];
	xy[0] = xy[1];
	xy[1] = t;
      }
      return xy;
    }
  };
}
