#include<cstdlib>
#include<cstring>
#include<fstream>

#include "error_code.h"
#include "file_check.h"
#include "flight_route.h"
#include "flight_data_analytics.h"
#include "polygon.h"
#include "string_man.h"

#define WAYPOINTNAMEBUFFSIZE 128
#define BUFFSIZE 4096

const int init_allocated_size = 500;

namespace libjeff{
  way_points::way_points(){
    lonlat = new double [2];
    name = new char [WAYPOINTNAMEBUFFSIZE];
    on_runway = false;
  }
  way_points::~way_points(){
    delete [] lonlat;
    delete [] name;
  }
  way_points& way_points::operator=(const way_points& in){
    if(this == &in){
      return *this;
    }

    strcpy(this->name,in.name);
    int i;
    for(i=0;i<2;i++){
      this->lonlat[i] = in.lonlat[i];
    }
    this->on_runway = in.on_runway;

    return *this;
  }
  bool way_points::operator==(const way_points& in){
    if(strcmp(this->get_name(),in.get_name())==0 && this->get_lonlat()[0] == in.get_lonlat()[0] && this->get_lonlat()[1] == in.get_lonlat()[1]){
      return true;
    }
    else{
      return false;
    }
  }
  
  way_points_list::way_points_list(){
    num_way_points = 0;
    points = NULL;
  }
  way_points_list::~way_points_list(){
    this->destroy();
  }
  
  int way_points_list::create(int num_way_points){
    if(num_way_points <= 0){
      return _ERRORCODE_INPUTOUTOFRANGE;
    }
    
    this->destroy();
    this->num_way_points = num_way_points;
    points = new way_points [this->num_way_points];
    
    return _ERRORCODE_NOERROR;
  }
  void way_points_list::destroy(){
    if(this->num_way_points>0){
      delete [] points;
    }
    points = NULL;
    this->num_way_points=0;
  }
  
  int way_points_list::read_way_points_list_csv(char* filename){
    int nline = file_check_length(filename);
    this->destroy();
    
    if(nline > 0){
      this->create(nline);
      
      int i;
      std::ifstream fin;
      fin.open(filename);
      char *ctemp = new char [BUFFSIZE];
      for(i=0;i<nline;i++){
	fin.getline(this->points[i].get_name(),WAYPOINTNAMEBUFFSIZE,',');
	fin.getline(ctemp,BUFFSIZE,',');
	this->points[i].get_lonlat()[0] = atof(ctemp);
	fin.getline(ctemp,BUFFSIZE);
	this->points[i].get_lonlat()[1] = atof(ctemp);
	if(is_on_known_runway(this->points[i].get_lonlat())){
	  this->points[i].set_on_runway();
	}
	else{
	  this->points[i].set_not_on_runway();
	}
      }
      fin.close();
      delete [] ctemp;
    }
    else{
      return _ERRORCODE_FILEREADERROR;
    }
    
    return _ERRORCODE_NOERROR;
  }
  
  way_points* way_points_list::get_way_point_by_name(char *name){
    way_points *result = NULL;

    int i;
    for(i=0;i<this->num_way_points;i++){
      if(strcmp(name,this->points[i].get_name())==0){
	result = points+i;
	break;
      }
    }
    return result;
  }
  way_points* way_points_list::get_way_point_by_lonlat(double* lonlat){
    way_points *result = NULL;

    int i;
    for(i=0;i<this->num_way_points;i++){
      if(lonlat[0] == this->points[i].get_lonlat()[0] && lonlat[1] == this->points[i].get_lonlat()[1]){
	result = this->points+i;
	break;
      }
    }
    return result;
  }
  way_points_list& way_points_list::operator=(const way_points_list& in){
    if(this == &in){
      return *this;
    }

    this->create(in.get_num_way_points());
    int i;
    for(i=0;i<in.get_num_way_points();i++){
      this->points[i] = in.points[i];
    }

    return *this;
  }
  
  flight_route::flight_route(){
    this->way_point_db = NULL;
    num_way_points_in_route = 0;
    type = 0;
    route_name = new char [WAYPOINTNAMEBUFFSIZE];
  }
  flight_route::~flight_route(){
    this->destroy();
    delete [] route_name;
  }
  int flight_route::create(int num_way_points){
    if(num_way_points <= 0){
      return _ERRORCODE_INPUTOUTOFRANGE;
    }
    
    this->destroy();
    this->num_way_points_in_route = num_way_points;
    points = new way_points *[this->num_way_points_in_route];
    int i;
    for(i=0;i<this->num_way_points_in_route;i++){
      points[i] = NULL;
    }
    
    return _ERRORCODE_NOERROR;
  }
  void flight_route::destroy(){
    if(num_way_points_in_route > 0){
      delete [] points;
    }
    num_way_points_in_route = 0;
  }
  way_points* flight_route::get_way_point(int index){
    if(index>=0 && index<this->get_num_way_points()){
      return points[index];
    }
    else if(index < 0 && index >= -this->get_num_way_points()){
      return points[this->get_num_way_points()-index];
    }
    else{
      return NULL;
    }
  }
  way_points* flight_route::get_way_point(char *name){
    int i;
    way_points* result = NULL;
    for(i=0;i<this->get_num_way_points();i++){
      if(strcmp(name,this->get_way_point(i)->get_name())==0){
	result = this->get_way_point(i);
	break;
      }
    }

    return result;
  }
  flight_route& flight_route::operator=(const flight_route& in){
    if(this == &in){
      return *this;
    }

    this->create(in.get_num_way_points());
    this->way_point_db = in.way_point_db;
    int i;
    for(i=0;i<in.get_num_way_points();i++){
      this->points[i] = in.points[i];
    }
    strcpy(this->route_name,in.route_name);
    this->type = in.type;

    return *this;
  }
								
  flight_route_list::flight_route_list(){
    way_point_db = new way_points_list;
    num_route = 0;
    allocated_size = 0;
  }
  flight_route_list::~flight_route_list(){
    this->destroy();
    delete way_point_db;
  }
  
  int flight_route_list::create(int num_route){
    if(num_route <= 0){
      return _ERRORCODE_INPUTOUTOFRANGE;
    }
    
    this->destroy();
    if(init_allocated_size < num_route){
      allocated_size = num_route;
    }
    else{
      allocated_size = init_allocated_size;
    }
    route = new flight_route [allocated_size];
    this->num_route = 0;

    if(route == NULL){
      return _ERRORCODE_FAILEDMEMORYALLOCATION;
    }

    int i;
    for(i=0;i<this->allocated_size;i++){
      this->route[i].set_way_point_db(way_point_db);
    }
    
    return _ERRORCODE_NOERROR;
  }
  void flight_route_list::destroy(){
    if(allocated_size > 0){
      delete [] route;
    }
    num_route = 0;
    allocated_size = 0;
  }
  
  flight_route* flight_route_list::get_route_by_name(char *name) const{
    flight_route *result = NULL;
    int i;
    
    for(i=0;i<this->num_route;i++){
      if(strcmp(name,this->route[i].get_route_name())==0){
	result = route+i;
	break;
      }
    }
    
    return result;
  }
  flight_route* flight_route_list::get_route(int index) const{
    if(index >=0 && index < this->num_route){
      return route+index;
    }
    else{
      return NULL;
    }
  }
  int flight_route_list::add_route(int index,flight_route* to_add){
    if(index < -1 || index > num_route){
      return _ERRORCODE_INPUTOUTOFRANGE;
    }
    if(index < 0){
      index = num_route;
    }

    if(num_route == allocated_size){
      int new_allocated_size;
      if(allocated_size > 0){
	new_allocated_size = allocated_size*2;
      }
      else{
	new_allocated_size = init_allocated_size;
      }
      flight_route* new_route = new flight_route [new_allocated_size];

      int i;
      for(i=0;i<index;i++){
	new_route[i] = route[i];
      }
      new_route[index] = *(to_add);
      for(i=index;i<num_route;i++){
	new_route[i+1] = route[i];
      }
      delete [] route;

      allocated_size = new_allocated_size;
      num_route++;
    }
    else{
      int i;
      for(i=num_route-1;i>=index;i--){
	route[i+1] = route[i];
      }
      route[index] = *(to_add);
    }

    return _ERRORCODE_NOERROR;
  }
  
  int flight_route_list::delete_route(int index){
    if(index < -1 || index >= num_route){
      return _ERRORCODE_INPUTOUTOFRANGE;
    }
    if(index < 0){
      index = num_route-1;
    }

    int i;
    for(i=index;i<num_route-1;i++){
		route[i] = route[i+1];
    }
    
      num_route--;

    return _ERRORCODE_NOERROR;
  }
  
  int flight_route_list::read_route_file_csv(char* filename){
    if(this->get_way_point_db()->get_num_way_points() <= 0){
      return _ERRORCODE_DATAYETTOBEINITIATED;
    }

    int nline = file_check_length(filename);
    this->destroy();
    
    if(nline > 0){
      this->create(nline);
      this->num_route = nline;

      int i,j,k;
      int num_column;
      std::ifstream fin;
      fin.open(filename);
      char *ctemp = new char [BUFFSIZE];
      char *ctemp2 = new char [BUFFSIZE];
      for(i=0;i<nline;i++){
	fin.getline(ctemp,BUFFSIZE);
	route[i].set_way_point_db(this->get_way_point_db());
	num_column = string_count_pattern(ctemp,",")+1;

	if(num_column > 1){
	  route[i].create(num_column-1);
	  string_extract_field(ctemp,",",0,ctemp2);
	  strcpy(route[i].get_route_name(),ctemp2);
	  k=0;
	  route[i].set_type(0);
	  for(j=0;j<num_column-1;j++){
	    string_extract_field(ctemp,",",j+1,ctemp2);
	    //std::cout << "additional: " << ctemp2 << std::endl;
	    if(strcmp(ctemp2,"")!=0 && this->get_way_point_db()->get_way_point_by_name(ctemp2)!=NULL){
	      route[i].set_way_point(j,this->get_way_point_db()->get_way_point_by_name(ctemp2));
	      //std::cout << route[i].get_way_point(j)->get_name() << " " << route[i].get_way_point(j)->get_lonlat()[0] << " " << route[i].get_way_point(j)->get_lonlat()[1] << " " << route[i].get_way_point(j)->is_on_runway() << std::endl;
	      if(j==0 && route[i].get_way_point(j)->is_on_runway()){
		route[i].set_type(-1);
	      }
	    }
	    else{
	      if(strcmp(ctemp2,"")!=0){
		std::cout << "Warning! Way point " << ctemp2 << " not found in the database." <<std::endl;
	      }
	      
	      if(k==0 && route[i].get_way_point(j-1)->is_on_runway()){
		route[i].set_type(1);
	      }
	      k++;
	      route[i].set_way_point(j,NULL);
	    }
	  }
	}
      }
      delete [] ctemp;
      delete [] ctemp2;
      fin.close();

      if(num_column <= 1){
	return _ERRORCODE_FILEREADERROR;
      }
    }
    else{
      return _ERRORCODE_FILEREADERROR;
    }

    return _ERRORCODE_NOERROR;
  }
  int flight_route_list::extract_containing(const flight_route_list &list,char *way_pts){
    char **way_pts_wrapper = new char *[1];
    way_pts_wrapper[0] = new char [strlen(way_pts)+10];
    strcpy(way_pts_wrapper[0],way_pts);
    int error = this->extract_containing(list,1,way_pts_wrapper);
    delete [] way_pts_wrapper[0];
    delete [] way_pts_wrapper;
    return error;
  }
  int flight_route_list::extract_containing(const flight_route_list &list,int num_way_pt,char **way_pts){
    this->destroy();

    bool *match = new bool [list.get_num_route()];
    int i,j;
    for(i=0;i<list.get_num_route();i++){
      match[i] = true;
    }

    for(i=0;i<list.get_num_route();i++){
      for(j=0;j<num_way_pt;j++){
	if(list.get_route(i)->get_way_point(way_pts[i])==NULL){
	  match[i] = false;
	  break;
	}
      }
    }

    int num_match = 0;
    for(i=0;i<list.get_num_route();i++){
      if(match[i]){
	num_match++;
      }
    }

    if(num_match>0){
      this->create(num_match);
      this->set_way_point_db(list.get_way_point_db());
      int count = 0;
      for(i=0;i<list.get_num_route();i++){
	if(match[i]){
	  *(this->get_route(count)) = *(list.get_route(i));
	  count++;
	}
      }
    }

    return _ERRORCODE_NOERROR;
  }
}
