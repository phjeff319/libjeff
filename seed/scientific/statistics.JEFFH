#ifndef STATISTICS
#define STATISTICS
namespace libjeff{
  ###CUDA###struct t_digest_points{
    unsigned long long count;
    double value;
  }__attribute__((packed));;

  ###CUDA###class t_digest{
  public:
    t_digest();
    t_digest(int max_space,int max_recursive_depth,unsigned long long threshold);
    t_digest(const t_digest &in);
    ~t_digest();
    
    int construct(int npt,double *dataset);
    
    t_digest& operator=(const t_digest&);
    t_digest operator+=(const t_digest&);
    int copy_attribute(const t_digest&);
    
    int write(char *filename) const;
    int read(char *filename);
    
    unsigned long long get_count() const;
    double get_min() const;
    double get_max() const;
    int set_multipler_per_level(int in);
    int set_max_recursive_depth(int in);
    
    double get_percentile(double percentile) const; //percentile in 0 - 1. Otherwise would return the min or max
    
    ###HOST### int host2device(t_digest* &device_copy) const;
    ###HOST### int device2host(t_digest* device_copy);
    
    ###HOST### void freegpu();
    
  private:
    int create(int space_size);
    void destroy();
    
    int multipler_per_level;
    int max_space;
    int max_recursive_depth;
    unsigned long long threshold;
    int num_point;
    t_digest_points *points;
  };
  ###CUDA###namespace t_digest_util{
    void freeCUDA(t_digest* &in);
  };
  
  template <class data_type> class sample_dataset{
  public:
    sample_dataset();
    ~sample_dataset();
    int create(int ndata,int ndim);
    int destroy();
    
    inline size_t get_ndata() const {return ndata;}
    inline size_t get_ndim() const {return ndim;}
    
    inline data_type *get_data_pts() const {return data_pts;}
    data_type *get_data_pts(int data_pt_index) const;
    
    int set_data_pts(int data_index,int dim_index,data_type in);
    int get_mean(int dim_index,double &mean) const;
    int get_sd(int dim_index,double &sd) const;
    
  private:
    size_t ndata, ndim;
    data_type *data_pts;
  };

  namespace kde{
    template <class dataType> int gaussian(sample_dataset<dataType>* dataset,int dim_index,double bandwidth,int nx,dataType **x,dataType **out,bool gpu_mode);
    template <class dataType> int gaussian(sample_dataset<dataType>* dataset,int dim_index,int nx,dataType **x,dataType **out,dataType (*bandwidth_function)(sample_dataset<dataType>* dataset,int dim_index),bool gpu_mode);
    /*
    int gaussian(sample_dataset<float>* dataset,int dim_index,float bandwidth,int nx,float **x,float **out);
    int gaussian(sample_dataset<float>* dataset,int dim_index,int nx,float **x,float **out,float (*bandwidth_function)(sample_dataset<float>* dataset,int dim_index));
    */
    namespace bandwidth_function{
      template <class dataType> dataType silverman(sample_dataset<dataType>* dataset,int dim_index);
    }
  }

  int statistics_extract_max_n(size_t nmax,size_t add_size,double *to_add,size_t &curr_size,double *inout); //assume both to_add and inout are sorted in decending order
  int statistics_extract_min_n(size_t nmin,size_t add_size,double *to_add,size_t &curr_size,double *inout); //assume both to_add and inout are sorted in ascending order
  double statistics_cal_mean(int ndata,double *in);
  double statistics_cal_sd(int ndata,double *in,double mean);

  void statistics_welch_t_test_diff_mean_cal_param(int sample_size1,double mean1,double sd1,int sample_size2,double mean2,double sd2,double &t_stat,int &df);
  
  int compute_k_mean_initialize(int num_data,double *in,int num_k,double* k_mean,char *method);
  int compute_k_mean_iterator(int num_data,double *in,int num_k,double* k_mean,int* num_data_in_gp,double** groups,char *method);
  int compute_k_mean(int num_data,double *in,int &num_k,double* &k_mean,double significance,int* &num_data_in_gp,double** &groups,char *method); //simple subroutine for k-mean of 1D data. On input, if num_k <= 0, it will optimize the value of num_k. If num_k > 0, it will compute the k-mean using num_k for k
//int compute_k_mean(int num_data,int ndim,double **in,int &num_k,double* &k_mean,double significance,int* &num_data_in_gp,double** &groups,char *method,double (*metric)(double *pt1,double *pt2)); //simple subroutine for k-mean of 1D data. On input, if num_k <= 0, it will optimize the value of num_k. If num_k > 0, it will compute the k-mean using num_k for k 
  double compute_k_mean_silhouette(int num_k,int *num_data,double **groups);
  double compute_k_max_silhouette(int num_k,int *num_data,double **groups);

  namespace k_mean{
    int sort_group_by_size(int num_k,int *num_data_in_gp,double **group);
  }
}
#endif
