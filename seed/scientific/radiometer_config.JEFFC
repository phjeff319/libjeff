#include "radiometer_config.h"
#include <iostream>

#include "error_code.h"
using namespace std;

radiometer::radiometer(){
  no_channel = 0;
}
radiometer::~radiometer(){
  if(no_channel>0){
    delete [] bandwidth;
    delete [] frequency;
    delete [] grid_point;
  }
  no_channel = 0;
}

int radiometer::grid_point_sum(){
  int i,j;

  j = 0;
  for(i=0;i<no_channel;i++){
    j += grid_point[i];
  }

  return j;
}

int radiometer::grid_point_sum(int in){
  int i,j;

  j = 0;
  for(i=0;i<in;i++){
    j += grid_point[i];
  }

  return j;
}

void radiometer::set_rain_mode(){
  int i;
  for(i=0;i<no_channel;i++){
    grid_point[i] = 1;
  }
  //grid_point[no_channel-3] = 5;
  //grid_point[no_channel-2] = 7;
  //grid_point[no_channel-1] = 9;
}
void radiometer::set_normal(){
  int i;
  for(i=0;i<no_channel;i++){
    grid_point[i] = 1;
  }
}
int radiometer::gen_grid_point_fre(double *grid_fre){
  switch(filter_type){
  case 1:
    this->gen_grid_point_fre_rectangular(grid_fre);
    break;
    /*
  case 2:
    this->gen_grid_point_fre_gaussian(grid_fre);
    break;
    */
  default:
    cout << "Error! Unknown passband filter for generating frequency grid points" << endl;
    return 1;
  }
  return _ERRORCODE_NOERROR;
}

int radiometer::set_filter(int type){
  if(type<=0||type>=3){
    return _ERRORCODE_INPUTOUTOFRANGE;
  }

  filter_type = type;
  
  return _ERRORCODE_NOERROR;
}
void radiometer::gen_grid_point_fre_rectangular(double *grid_fre){
  int i,k;
  for(i=0;i<this->no_channel;i++){
    for(k=(-this->grid_point[i]/2);k<=(this->grid_point[i]/2);k++){
      grid_fre[this->grid_point_sum(i) + k + (this->grid_point[i]/2)] = this->frequency[i] + k*(this->bandwidth[i]/(this->grid_point[i]));
    }
  }
}
void radiometer::gen_grid_point_fre_gaussian(double *grid_fre){
  int i,k;
  for(i=0;i<this->no_channel;i++){
    for(k=(-this->grid_point[i]/2);k<=(this->grid_point[i]/2);k++){
      grid_fre[this->grid_point_sum(i) + k + (this->grid_point[i]/2)] = this->frequency[i] + k*(this->bandwidth[i]/((this->grid_point[i]-1)/2));
    }
  }
}

int radiometer::cal_channel_reading(double *grid_data,double *reading){
  switch(filter_type){
  case 1:
    this->cal_channel_reading_rectangular(grid_data,reading);
    break;
    /*
  case 2:
    this->cal_channel_reading_gaussian(grid_data,reading);
    break;
    */
  default:
    cout << "Error! Unknown passband filter" << endl;
    return 1;
  }
  return _ERRORCODE_NOERROR;
}
void radiometer::cal_channel_reading_rectangular(double *grid_data,double *reading){
  int i,k;
  for(i=0;i<this->no_channel;i++){
    reading[i]=0.;
    for(k=(-this->grid_point[i]/2);k<=(this->grid_point[i]/2);k++){
      reading[i] += grid_data[this->grid_point_sum(i) + k + (this->grid_point[i]/2)];
    }
    reading[i]/=this->grid_point[i];
  }
}
void radiometer::cal_channel_reading_gaussian(double *grid_data,double *reading){
}

hatpro_radiometer::hatpro_radiometer():radiometer(){
  no_channel = 14;
  elevation = 79.8;
  frequency = new double [no_channel];
  bandwidth = new double [no_channel];
  frequency[0]=22.24e9;
  frequency[1]=23.04e9;
  frequency[2]=23.84e9;
  frequency[3]=25.44e9;
  frequency[4]=26.24e9;
  frequency[5]=27.84e9;
  frequency[6]=31.40e9;
  frequency[7]=51.26e9;
  frequency[8]=52.28e9;
  frequency[9]=53.86e9;
  frequency[10]=54.94e9;
  frequency[11]=56.66e9;
  frequency[12]=57.30e9;
  frequency[13]=58.00e9;

  int i;
  for(i=0;i<no_channel;i++){
    bandwidth[i]=230e6;
  }
  bandwidth[no_channel-3] = 600e6;
  bandwidth[no_channel-2] = 1e9;
  bandwidth[no_channel-1] = 2e9;

  //  grid_point must be an odd number
  grid_point = new int [no_channel];
  set_normal();

  this->set_filter(1);
}
